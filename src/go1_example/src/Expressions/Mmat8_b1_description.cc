/*
 * Automatically Generated from Mathematica.
 * Sun 22 Sep 2024 09:05:52 GMT-05:00
 */

#include "math2mat.hpp"
#include "mdefs.hpp"

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t139;
  double t303;
  double t297;
  double t268;
  double t311;
  double t207;
  double t300;
  double t319;
  double t320;
  double t350;
  double t341;
  double t326;
  double t334;
  double t337;
  double t382;
  double t395;
  double t402;
  double t412;
  double t413;
  double t415;
  double t451;
  double t454;
  double t456;
  double t457;
  double t458;
  double t460;
  double t480;
  double t482;
  double t483;
  double t489;
  double t490;
  double t504;
  double t471;
  double t476;
  double t477;
  double t484;
  double t506;
  double t509;
  double t516;
  double t517;
  double t522;
  double t478;
  double t527;
  double t537;
  double t548;
  double t555;
  double t563;
  double t594;
  double t600;
  double t349;
  double t362;
  double t366;
  double t372;
  double t381;
  double t404;
  double t406;
  double t407;
  double t411;
  double t416;
  double t421;
  double t425;
  double t426;
  double t427;
  double t433;
  double t434;
  double t437;
  double t438;
  double t439;
  double t443;
  double t445;
  double t446;
  double t514;
  double t524;
  double t525;
  double t526;
  double t528;
  double t529;
  double t530;
  double t531;
  double t535;
  double t538;
  double t545;
  double t546;
  double t547;
  double t549;
  double t550;
  double t551;
  double t552;
  double t553;
  double t557;
  double t558;
  double t561;
  double t562;
  double t564;
  double t565;
  double t566;
  double t567;
  double t568;
  double t573;
  double t574;
  double t576;
  double t577;
  double t578;
  double t579;
  double t580;
  double t581;
  double t583;
  double t584;
  double t585;
  double t587;
  double t588;
  double t589;
  double t591;
  double t592;
  double t595;
  double t598;
  double t599;
  double t603;
  double t604;
  double t605;
  double t607;
  double t610;
  double t611;
  double t613;
  double t614;
  double t615;
  double t616;
  double t617;
  double t435;
  double t440;
  double t449;
  double t450;
  double t636;
  double t637;
  double t638;
  double t639;
  double t536;
  double t554;
  double t571;
  double t572;
  double t640;
  double t642;
  double t643;
  double t644;
  double t670;
  double t671;
  double t672;
  double t673;
  double t693;
  double t694;
  double t695;
  double t582;
  double t593;
  double t608;
  double t609;
  double t645;
  double t646;
  double t648;
  double t652;
  double t674;
  double t675;
  double t676;
  double t677;
  double t685;
  double t686;
  double t687;
  double t688;
  double t696;
  double t698;
  double t699;
  double t700;
  double t701;
  double t728;
  double t729;
  double t730;
  double t715;
  double t716;
  double t717;
  double t718;
  double t720;
  double t721;
  double t722;
  double t723;
  double t710;
  double t711;
  double t712;
  double t713;
  double t736;
  double t737;
  double t738;
  double t740;
  double t741;
  double t742;
  double t732;
  double t733;
  double t734;
  double t620;
  double t621;
  double t622;
  double t624;
  double t653;
  double t654;
  double t656;
  double t657;
  double t678;
  double t679;
  double t680;
  double t681;
  double t744;
  double t745;
  double t746;
  double t768;
  double t769;
  double t770;
  double t625;
  double t626;
  double t627;
  double t658;
  double t660;
  double t661;
  double t682;
  double t683;
  double t684;
  double t748;
  double t749;
  double t750;
  double t772;
  double t773;
  double t774;
  double t790;
  double t791;
  double t792;
  t139 = Cos(var1[4]);
  t303 = Cos(var1[12]);
  t297 = Sin(var1[4]);
  t268 = Sin(var1[12]);
  t311 = Sin(var1[5]);
  t207 = Cos(var1[5]);
  t300 = t268*t297;
  t319 = -1.*t303*t139*t311;
  t320 = t300 + t319;
  t350 = Cos(var1[3]);
  t341 = Sin(var1[3]);
  t326 = t303*t297;
  t334 = t139*t268*t311;
  t337 = t326 + t334;
  t382 = t139*t268;
  t395 = t303*t297*t311;
  t402 = t382 + t395;
  t412 = t303*t139;
  t413 = -1.*t268*t297*t311;
  t415 = t412 + t413;
  t451 = -1.*t303;
  t454 = 1. + t451;
  t456 = -0.072*t454;
  t457 = -0.081713*t303;
  t458 = -0.000097*t268;
  t460 = t456 + t457 + t458;
  t480 = 0.000097*t303;
  t482 = -0.009713*t268;
  t483 = t480 + t482;
  t489 = -0.327437*t207;
  t490 = -1.*t460*t311;
  t504 = t489 + t490;
  t471 = t207*t460;
  t476 = -0.327437*t311;
  t477 = t471 + t476;
  t484 = t483*t297;
  t506 = t139*t504;
  t509 = t484 + t506;
  t516 = t139*t483;
  t517 = -1.*t297*t504;
  t522 = t516 + t517;
  t478 = -1.*t477*t311;
  t527 = t303*t207*t477;
  t537 = t477*t311;
  t548 = t207*t268*t477;
  t555 = -1.*t303*t207*t477;
  t563 = -1.*t207*t268*t477;
  t594 = -1.*t483*t268;
  t600 = t303*t483;
  t349 = t207*t341*t297;
  t362 = t350*t311;
  t366 = t349 + t362;
  t372 = 2.416*t139*t207*t366;
  t381 = t303*t350*t207;
  t404 = -1.*t341*t402;
  t406 = t381 + t404;
  t407 = 2.416*t320*t406;
  t411 = -1.*t350*t207*t268;
  t416 = -1.*t341*t415;
  t421 = t411 + t416;
  t425 = 2.416*t337*t421;
  t426 = t372 + t407 + t425;
  t427 = -1.*t350*t207*t297;
  t433 = t341*t311;
  t434 = t427 + t433;
  t437 = t303*t207*t341;
  t438 = t350*t402;
  t439 = t437 + t438;
  t443 = -1.*t207*t268*t341;
  t445 = t350*t415;
  t446 = t443 + t445;
  t514 = -1.*t139*t207*t509;
  t524 = t207*t297*t522;
  t525 = t478 + t514 + t524;
  t526 = t320*t525;
  t528 = t320*t509;
  t529 = t402*t522;
  t530 = t527 + t528 + t529;
  t531 = t139*t207*t530;
  t535 = t526 + t531;
  t538 = t139*t207*t509;
  t545 = -1.*t207*t297*t522;
  t546 = t537 + t538 + t545;
  t547 = t337*t546;
  t549 = -1.*t337*t509;
  t550 = -1.*t415*t522;
  t551 = t548 + t549 + t550;
  t552 = t139*t207*t551;
  t553 = t547 + t552;
  t557 = -1.*t320*t509;
  t558 = -1.*t402*t522;
  t561 = t555 + t557 + t558;
  t562 = t337*t561;
  t564 = t337*t509;
  t565 = t415*t522;
  t566 = t563 + t564 + t565;
  t567 = t320*t566;
  t568 = t562 + t567;
  t573 = -1.*t207*t504;
  t574 = t478 + t573;
  t576 = t303*t207*t574;
  t577 = t483*t268;
  t578 = -1.*t303*t311*t504;
  t579 = t577 + t527 + t578;
  t580 = t311*t579;
  t581 = t576 + t580;
  t583 = t207*t504;
  t584 = t537 + t583;
  t585 = -1.*t207*t268*t584;
  t587 = -1.*t303*t483;
  t588 = -1.*t268*t311*t504;
  t589 = t587 + t548 + t588;
  t591 = t311*t589;
  t592 = t585 + t591;
  t595 = t303*t311*t504;
  t598 = t594 + t555 + t595;
  t599 = -1.*t207*t268*t598;
  t603 = t268*t311*t504;
  t604 = t600 + t563 + t603;
  t605 = t303*t207*t604;
  t607 = t599 + t605;
  t610 = -1.*t303*t460;
  t611 = t610 + t594;
  t613 = t303*t611;
  t614 = -1.*t460*t268;
  t615 = t600 + t614;
  t616 = t268*t615;
  t617 = t613 + t616;
  t435 = 2.416*t139*t207*t434;
  t440 = 2.416*t320*t439;
  t449 = 2.416*t337*t446;
  t450 = t435 + t440 + t449;
  t636 = 2.416*t366*t434;
  t637 = 2.416*t439*t406;
  t638 = 2.416*t446*t421;
  t639 = t636 + t637 + t638;
  t536 = 2.416*t337*t535;
  t554 = 2.416*t320*t553;
  t571 = 2.416*t139*t207*t568;
  t572 = t536 + t554 + t571;
  t640 = 2.416*t421*t535;
  t642 = 2.416*t406*t553;
  t643 = 2.416*t366*t568;
  t644 = t640 + t642 + t643;
  t670 = 2.416*t446*t535;
  t671 = 2.416*t439*t553;
  t672 = 2.416*t434*t568;
  t673 = t670 + t671 + t672;
  t693 = 0.004552*t139*t207;
  t694 = -0.000286*t320;
  t695 = 3.e-6*t337;
  t582 = 2.416*t337*t581;
  t593 = 2.416*t320*t592;
  t608 = 2.416*t139*t207*t607;
  t609 = t582 + t593 + t608;
  t645 = 2.416*t421*t581;
  t646 = 2.416*t406*t592;
  t648 = 2.416*t366*t607;
  t652 = t645 + t646 + t648;
  t674 = 2.416*t446*t581;
  t675 = 2.416*t439*t592;
  t676 = 2.416*t434*t607;
  t677 = t674 + t675 + t676;
  t685 = -0.000286*t139*t207;
  t686 = 0.009792*t320;
  t687 = -2.e-6*t337;
  t688 = t685 + t686 + t687;
  t696 = t693 + t694 + t695;
  t698 = 3.e-6*t139*t207;
  t699 = -2.e-6*t320;
  t700 = 0.006644*t337;
  t701 = t698 + t699 + t700;
  t728 = 2.416*t581*t535;
  t729 = 2.416*t592*t553;
  t730 = 2.416*t607*t568;
  t715 = 0.009792*t303*t207;
  t716 = 2.e-6*t207*t268;
  t717 = -0.000286*t311;
  t718 = t715 + t716 + t717;
  t720 = -2.e-6*t303*t207;
  t721 = -0.006644*t207*t268;
  t722 = 3.e-6*t311;
  t723 = t720 + t721 + t722;
  t710 = -0.000286*t303*t207;
  t711 = -3.e-6*t207*t268;
  t712 = 0.004552*t311;
  t713 = t710 + t711 + t712;
  t736 = -2.e-6*t303;
  t737 = 0.009792*t268;
  t738 = t736 + t737;
  t740 = 0.006644*t303;
  t741 = -2.e-6*t268;
  t742 = t740 + t741;
  t732 = 3.e-6*t303;
  t733 = -0.000286*t268;
  t734 = t732 + t733;
  t620 = 2.416*t139*t207*t617;
  t621 = -0.7910877919999999*t303*t320;
  t622 = 0.7910877919999999*t268*t337;
  t624 = t620 + t621 + t622;
  t653 = 2.416*t617*t366;
  t654 = -0.7910877919999999*t303*t406;
  t656 = 0.7910877919999999*t268*t421;
  t657 = t653 + t654 + t656;
  t678 = 2.416*t617*t434;
  t679 = -0.7910877919999999*t303*t439;
  t680 = 0.7910877919999999*t268*t446;
  t681 = t678 + t679 + t680;
  t744 = 0.7910877919999999*t268*t535;
  t745 = -0.7910877919999999*t303*t553;
  t746 = 2.416*t617*t568;
  t768 = 0.7910877919999999*t268*t581;
  t769 = -0.7910877919999999*t303*t592;
  t770 = 2.416*t617*t607;
  t625 = -0.00023435199999999998*t320;
  t626 = -0.023466607999999996*t337;
  t627 = t625 + t626;
  t658 = -0.00023435199999999998*t406;
  t660 = -0.023466607999999996*t421;
  t661 = t658 + t660;
  t682 = -0.00023435199999999998*t439;
  t683 = -0.023466607999999996*t446;
  t684 = t682 + t683;
  t748 = -0.023466607999999996*t535;
  t749 = -0.00023435199999999998*t553;
  t750 = t693 + t694 + t695 + t748 + t749;
  t772 = -0.023466607999999996*t581;
  t773 = -0.00023435199999999998*t592;
  t774 = t710 + t711 + t712 + t772 + t773;
  t790 = 0.00007973551582399999*t303;
  t791 = -0.007969835723695999*t268;
  t792 = t790 + t791;
  p_output1[0]=2.416*Power(t139,2)*Power(t207,2) + 2.416*Power(t320,2) + 2.416*Power(t337,2);
  p_output1[1]=t426;
  p_output1[2]=t450;
  p_output1[3]=t572;
  p_output1[4]=t609;
  p_output1[5]=t624;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=t627;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=t426;
  p_output1[19]=2.416*Power(t366,2) + 2.416*Power(t406,2) + 2.416*Power(t421,2);
  p_output1[20]=t639;
  p_output1[21]=t644;
  p_output1[22]=t652;
  p_output1[23]=t657;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=t661;
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=0;
  p_output1[36]=t450;
  p_output1[37]=t639;
  p_output1[38]=2.416*Power(t434,2) + 2.416*Power(t439,2) + 2.416*Power(t446,2);
  p_output1[39]=t673;
  p_output1[40]=t677;
  p_output1[41]=t681;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=t684;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
  p_output1[54]=t572;
  p_output1[55]=t644;
  p_output1[56]=t673;
  p_output1[57]=2.416*Power(t535,2) + 2.416*Power(t553,2) + 2.416*Power(t568,2) + t320*t688 + t139*t207*t696 + t337*t701;
  p_output1[58]=t139*t207*t713 + t320*t718 + t337*t723 + t728 + t729 + t730;
  p_output1[59]=t139*t207*t734 + t320*t738 + t337*t742 + t744 + t745 + t746;
  p_output1[60]=0;
  p_output1[61]=0;
  p_output1[62]=0;
  p_output1[63]=0;
  p_output1[64]=0;
  p_output1[65]=0;
  p_output1[66]=t750;
  p_output1[67]=0;
  p_output1[68]=0;
  p_output1[69]=0;
  p_output1[70]=0;
  p_output1[71]=0;
  p_output1[72]=t609;
  p_output1[73]=t652;
  p_output1[74]=t677;
  p_output1[75]=t207*t303*t688 + t311*t696 - 1.*t207*t268*t701 + t728 + t729 + t730;
  p_output1[76]=2.416*Power(t581,2) + 2.416*Power(t592,2) + 2.416*Power(t607,2) + t311*t713 + t207*t303*t718 - 1.*t207*t268*t723;
  p_output1[77]=t311*t734 + t207*t303*t738 - 1.*t207*t268*t742 + t768 + t769 + t770;
  p_output1[78]=0;
  p_output1[79]=0;
  p_output1[80]=0;
  p_output1[81]=0;
  p_output1[82]=0;
  p_output1[83]=0;
  p_output1[84]=t774;
  p_output1[85]=0;
  p_output1[86]=0;
  p_output1[87]=0;
  p_output1[88]=0;
  p_output1[89]=0;
  p_output1[90]=t624;
  p_output1[91]=t657;
  p_output1[92]=t681;
  p_output1[93]=t268*t688 + t303*t701 + t744 + t745 + t746;
  p_output1[94]=t268*t718 + t303*t723 + t768 + t769 + t770;
  p_output1[95]=0.25903141334910396*Power(t268,2) + 0.25903141334910396*Power(t303,2) + 2.416*Power(t617,2) + t268*t738 + t303*t742;
  p_output1[96]=0;
  p_output1[97]=0;
  p_output1[98]=0;
  p_output1[99]=0;
  p_output1[100]=0;
  p_output1[101]=0;
  p_output1[102]=t792;
  p_output1[103]=0;
  p_output1[104]=0;
  p_output1[105]=0;
  p_output1[106]=0;
  p_output1[107]=0;
  p_output1[108]=0;
  p_output1[109]=0;
  p_output1[110]=0;
  p_output1[111]=0;
  p_output1[112]=0;
  p_output1[113]=0;
  p_output1[114]=0;
  p_output1[115]=0;
  p_output1[116]=0;
  p_output1[117]=0;
  p_output1[118]=0;
  p_output1[119]=0;
  p_output1[120]=0;
  p_output1[121]=0;
  p_output1[122]=0;
  p_output1[123]=0;
  p_output1[124]=0;
  p_output1[125]=0;
  p_output1[126]=0;
  p_output1[127]=0;
  p_output1[128]=0;
  p_output1[129]=0;
  p_output1[130]=0;
  p_output1[131]=0;
  p_output1[132]=0;
  p_output1[133]=0;
  p_output1[134]=0;
  p_output1[135]=0;
  p_output1[136]=0;
  p_output1[137]=0;
  p_output1[138]=0;
  p_output1[139]=0;
  p_output1[140]=0;
  p_output1[141]=0;
  p_output1[142]=0;
  p_output1[143]=0;
  p_output1[144]=0;
  p_output1[145]=0;
  p_output1[146]=0;
  p_output1[147]=0;
  p_output1[148]=0;
  p_output1[149]=0;
  p_output1[150]=0;
  p_output1[151]=0;
  p_output1[152]=0;
  p_output1[153]=0;
  p_output1[154]=0;
  p_output1[155]=0;
  p_output1[156]=0;
  p_output1[157]=0;
  p_output1[158]=0;
  p_output1[159]=0;
  p_output1[160]=0;
  p_output1[161]=0;
  p_output1[162]=0;
  p_output1[163]=0;
  p_output1[164]=0;
  p_output1[165]=0;
  p_output1[166]=0;
  p_output1[167]=0;
  p_output1[168]=0;
  p_output1[169]=0;
  p_output1[170]=0;
  p_output1[171]=0;
  p_output1[172]=0;
  p_output1[173]=0;
  p_output1[174]=0;
  p_output1[175]=0;
  p_output1[176]=0;
  p_output1[177]=0;
  p_output1[178]=0;
  p_output1[179]=0;
  p_output1[180]=0;
  p_output1[181]=0;
  p_output1[182]=0;
  p_output1[183]=0;
  p_output1[184]=0;
  p_output1[185]=0;
  p_output1[186]=0;
  p_output1[187]=0;
  p_output1[188]=0;
  p_output1[189]=0;
  p_output1[190]=0;
  p_output1[191]=0;
  p_output1[192]=0;
  p_output1[193]=0;
  p_output1[194]=0;
  p_output1[195]=0;
  p_output1[196]=0;
  p_output1[197]=0;
  p_output1[198]=0;
  p_output1[199]=0;
  p_output1[200]=0;
  p_output1[201]=0;
  p_output1[202]=0;
  p_output1[203]=0;
  p_output1[204]=0;
  p_output1[205]=0;
  p_output1[206]=0;
  p_output1[207]=0;
  p_output1[208]=0;
  p_output1[209]=0;
  p_output1[210]=0;
  p_output1[211]=0;
  p_output1[212]=0;
  p_output1[213]=0;
  p_output1[214]=0;
  p_output1[215]=0;
  p_output1[216]=t627;
  p_output1[217]=t661;
  p_output1[218]=t684;
  p_output1[219]=t750;
  p_output1[220]=t774;
  p_output1[221]=t792;
  p_output1[222]=0;
  p_output1[223]=0;
  p_output1[224]=0;
  p_output1[225]=0;
  p_output1[226]=0;
  p_output1[227]=0;
  p_output1[228]=0.004779953895647999;
  p_output1[229]=0;
  p_output1[230]=0;
  p_output1[231]=0;
  p_output1[232]=0;
  p_output1[233]=0;
  p_output1[234]=0;
  p_output1[235]=0;
  p_output1[236]=0;
  p_output1[237]=0;
  p_output1[238]=0;
  p_output1[239]=0;
  p_output1[240]=0;
  p_output1[241]=0;
  p_output1[242]=0;
  p_output1[243]=0;
  p_output1[244]=0;
  p_output1[245]=0;
  p_output1[246]=0;
  p_output1[247]=0;
  p_output1[248]=0;
  p_output1[249]=0;
  p_output1[250]=0;
  p_output1[251]=0;
  p_output1[252]=0;
  p_output1[253]=0;
  p_output1[254]=0;
  p_output1[255]=0;
  p_output1[256]=0;
  p_output1[257]=0;
  p_output1[258]=0;
  p_output1[259]=0;
  p_output1[260]=0;
  p_output1[261]=0;
  p_output1[262]=0;
  p_output1[263]=0;
  p_output1[264]=0;
  p_output1[265]=0;
  p_output1[266]=0;
  p_output1[267]=0;
  p_output1[268]=0;
  p_output1[269]=0;
  p_output1[270]=0;
  p_output1[271]=0;
  p_output1[272]=0;
  p_output1[273]=0;
  p_output1[274]=0;
  p_output1[275]=0;
  p_output1[276]=0;
  p_output1[277]=0;
  p_output1[278]=0;
  p_output1[279]=0;
  p_output1[280]=0;
  p_output1[281]=0;
  p_output1[282]=0;
  p_output1[283]=0;
  p_output1[284]=0;
  p_output1[285]=0;
  p_output1[286]=0;
  p_output1[287]=0;
  p_output1[288]=0;
  p_output1[289]=0;
  p_output1[290]=0;
  p_output1[291]=0;
  p_output1[292]=0;
  p_output1[293]=0;
  p_output1[294]=0;
  p_output1[295]=0;
  p_output1[296]=0;
  p_output1[297]=0;
  p_output1[298]=0;
  p_output1[299]=0;
  p_output1[300]=0;
  p_output1[301]=0;
  p_output1[302]=0;
  p_output1[303]=0;
  p_output1[304]=0;
  p_output1[305]=0;
  p_output1[306]=0;
  p_output1[307]=0;
  p_output1[308]=0;
  p_output1[309]=0;
  p_output1[310]=0;
  p_output1[311]=0;
  p_output1[312]=0;
  p_output1[313]=0;
  p_output1[314]=0;
  p_output1[315]=0;
  p_output1[316]=0;
  p_output1[317]=0;
  p_output1[318]=0;
  p_output1[319]=0;
  p_output1[320]=0;
  p_output1[321]=0;
  p_output1[322]=0;
  p_output1[323]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 18, (mwSize) 18, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "Mmat8_b1_description.hh"

namespace SymFunction
{

void Mmat8_b1_description_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
