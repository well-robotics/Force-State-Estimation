/*
 * Automatically Generated from Mathematica.
 * Sun 22 Sep 2024 09:05:55 GMT-05:00
 */

#include "math2mat.hpp"
#include "mdefs.hpp"

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t576;
  double t565;
  double t600;
  double t666;
  double t661;
  double t664;
  double t667;
  double t471;
  double t665;
  double t672;
  double t676;
  double t608;
  double t698;
  double t707;
  double t711;
  double t685;
  double t566;
  double t624;
  double t634;
  double t677;
  double t716;
  double t752;
  double t753;
  double t754;
  double t755;
  double t794;
  double t798;
  double t773;
  double t774;
  double t775;
  double t778;
  double t779;
  double t780;
  double t781;
  double t788;
  double t789;
  double t803;
  double t804;
  double t806;
  double t822;
  double t827;
  double t831;
  double t836;
  double t840;
  double t842;
  double t857;
  double t858;
  double t859;
  double t861;
  double t862;
  double t863;
  double t901;
  double t902;
  double t903;
  double t904;
  double t905;
  double t906;
  double t908;
  double t910;
  double t911;
  double t912;
  double t900;
  double t907;
  double t914;
  double t919;
  double t926;
  double t929;
  double t930;
  double t931;
  double t932;
  double t933;
  double t895;
  double t896;
  double t897;
  double t899;
  double t920;
  double t921;
  double t937;
  double t938;
  double t939;
  double t944;
  double t945;
  double t954;
  double t925;
  double t934;
  double t935;
  double t943;
  double t958;
  double t959;
  double t963;
  double t964;
  double t967;
  double t936;
  double t972;
  double t981;
  double t986;
  double t993;
  double t1001;
  double t1023;
  double t1019;
  double t1029;
  double t1033;
  double t1009;
  double t1013;
  double t1040;
  double t1045;
  double t795;
  double t807;
  double t816;
  double t820;
  double t835;
  double t847;
  double t851;
  double t856;
  double t860;
  double t864;
  double t865;
  double t866;
  double t867;
  double t869;
  double t870;
  double t875;
  double t880;
  double t881;
  double t887;
  double t889;
  double t891;
  double t892;
  double t960;
  double t968;
  double t970;
  double t971;
  double t973;
  double t975;
  double t976;
  double t978;
  double t979;
  double t982;
  double t983;
  double t984;
  double t985;
  double t987;
  double t988;
  double t989;
  double t990;
  double t991;
  double t994;
  double t998;
  double t999;
  double t1000;
  double t1002;
  double t1003;
  double t1004;
  double t1005;
  double t1006;
  double t1010;
  double t1011;
  double t1012;
  double t1014;
  double t1015;
  double t1016;
  double t1017;
  double t1020;
  double t1021;
  double t1022;
  double t1024;
  double t1025;
  double t1026;
  double t1027;
  double t1030;
  double t1031;
  double t1032;
  double t1034;
  double t1035;
  double t1036;
  double t1037;
  double t1041;
  double t1042;
  double t1043;
  double t1044;
  double t1046;
  double t1047;
  double t1048;
  double t1051;
  double t1052;
  double t1053;
  double t1054;
  double t1056;
  double t1057;
  double t1058;
  double t1059;
  double t1062;
  double t1063;
  double t1064;
  double t1065;
  double t1066;
  double t1067;
  double t1068;
  double t1069;
  double t1073;
  double t1074;
  double t1075;
  double t1076;
  double t1078;
  double t1079;
  double t1080;
  double t1083;
  double t1084;
  double t1085;
  double t1089;
  double t1090;
  double t1091;
  double t1092;
  double t1094;
  double t1095;
  double t1096;
  double t1097;
  double t879;
  double t888;
  double t893;
  double t894;
  double t1116;
  double t1118;
  double t1119;
  double t1120;
  double t980;
  double t992;
  double t1007;
  double t1008;
  double t1121;
  double t1122;
  double t1123;
  double t1124;
  double t1153;
  double t1154;
  double t1155;
  double t1156;
  double t639;
  double t1232;
  double t1018;
  double t1028;
  double t1038;
  double t1039;
  double t1125;
  double t1126;
  double t1127;
  double t1128;
  double t1157;
  double t1158;
  double t1159;
  double t1160;
  double t1194;
  double t1176;
  double t1177;
  double t1181;
  double t1183;
  double t1184;
  double t1185;
  double t1203;
  double t1204;
  double t1205;
  double t1199;
  double t1200;
  double t1201;
  double t1195;
  double t1196;
  double t1197;
  double t1212;
  double t1213;
  double t1214;
  double t1208;
  double t1209;
  double t1210;
  double t1224;
  double t1225;
  double t1226;
  double t1220;
  double t1221;
  double t1222;
  double t1267;
  double t1049;
  double t1061;
  double t1070;
  double t1071;
  double t1129;
  double t1130;
  double t1131;
  double t1132;
  double t1161;
  double t1162;
  double t1163;
  double t1164;
  double t1207;
  double t1216;
  double t1217;
  double t1218;
  double t1254;
  double t1257;
  double t1258;
  double t1259;
  double t1297;
  double t1081;
  double t1086;
  double t1087;
  double t1088;
  double t1133;
  double t1134;
  double t1135;
  double t1136;
  double t1165;
  double t1166;
  double t1167;
  double t1168;
  double t1228;
  double t1229;
  double t1230;
  double t1263;
  double t1264;
  double t1265;
  double t1293;
  double t1294;
  double t1295;
  double t1093;
  double t1098;
  double t1099;
  double t1137;
  double t1138;
  double t1139;
  double t1169;
  double t1170;
  double t1171;
  double t1233;
  double t1234;
  double t1235;
  double t1268;
  double t1269;
  double t1270;
  double t1298;
  double t1299;
  double t1300;
  double t1322;
  double t1323;
  double t1324;
  double t1100;
  double t1102;
  double t1106;
  double t1140;
  double t1141;
  double t1142;
  double t1172;
  double t1173;
  double t1174;
  double t1236;
  double t1237;
  double t1238;
  double t1271;
  double t1272;
  double t1273;
  double t1301;
  double t1302;
  double t1303;
  double t1325;
  double t1326;
  double t1327;
  double t1333;
  double t1334;
  double t1335;
  t576 = Cos(var1[15]);
  t565 = Sin(var1[4]);
  t600 = Cos(var1[4]);
  t666 = Cos(var1[16]);
  t661 = Cos(var1[17]);
  t664 = Sin(var1[16]);
  t667 = Sin(var1[17]);
  t471 = Sin(var1[15]);
  t665 = -1.*t661*t664;
  t672 = -1.*t666*t667;
  t676 = t665 + t672;
  t608 = Sin(var1[5]);
  t698 = t666*t661;
  t707 = -1.*t664*t667;
  t711 = t698 + t707;
  t685 = Cos(var1[5]);
  t566 = t471*t565;
  t624 = -1.*t576*t600*t608;
  t634 = t566 + t624;
  t677 = t576*t676*t565;
  t716 = t685*t711;
  t752 = t471*t676*t608;
  t753 = t716 + t752;
  t754 = t600*t753;
  t755 = t677 + t754;
  t794 = Cos(var1[3]);
  t798 = Sin(var1[3]);
  t773 = t576*t711*t565;
  t774 = t661*t664;
  t775 = t666*t667;
  t778 = t774 + t775;
  t779 = t685*t778;
  t780 = t471*t711*t608;
  t781 = t779 + t780;
  t788 = t600*t781;
  t789 = t773 + t788;
  t803 = t600*t471;
  t804 = t576*t565*t608;
  t806 = t803 + t804;
  t822 = -1.*t685*t471*t676;
  t827 = t711*t608;
  t831 = t822 + t827;
  t836 = t576*t600*t676;
  t840 = -1.*t565*t753;
  t842 = t836 + t840;
  t857 = -1.*t685*t471*t711;
  t858 = t778*t608;
  t859 = t857 + t858;
  t861 = t576*t600*t711;
  t862 = -1.*t565*t781;
  t863 = t861 + t862;
  t901 = -1.*t661;
  t902 = 1. + t901;
  t903 = -0.3455*t902;
  t904 = -0.340501*t661;
  t905 = -0.20949600000000002*t667;
  t906 = t903 + t904 + t905;
  t908 = -0.35*t902;
  t910 = -0.559496*t661;
  t911 = -0.004998999999999976*t667;
  t912 = t908 + t910 + t911;
  t900 = -0.3455*t664;
  t907 = -1.*t664*t906;
  t914 = t666*t912;
  t919 = t900 + t907 + t914;
  t926 = -1.*t666;
  t929 = 1. + t926;
  t930 = -0.3455*t929;
  t931 = t666*t906;
  t932 = t664*t912;
  t933 = t930 + t931 + t932;
  t895 = -1.*t576;
  t896 = 1. + t895;
  t897 = 0.072*t896;
  t899 = 0.19875*t576;
  t920 = -1.*t471*t919;
  t921 = t897 + t899 + t920;
  t937 = 0.12675000000000003*t471;
  t938 = t576*t919;
  t939 = t937 + t938;
  t944 = t685*t933;
  t945 = -1.*t921*t608;
  t954 = t944 + t945;
  t925 = t685*t921;
  t934 = t933*t608;
  t935 = t925 + t934;
  t943 = t939*t565;
  t958 = t600*t954;
  t959 = t943 + t958;
  t963 = t600*t939;
  t964 = -1.*t565*t954;
  t967 = t963 + t964;
  t936 = t576*t685*t935;
  t972 = -1.*t935*t831;
  t981 = t935*t831;
  t986 = -1.*t935*t859;
  t993 = -1.*t576*t685*t935;
  t1001 = t935*t859;
  t1023 = -1.*t576*t939*t711;
  t1019 = t576*t939*t676;
  t1029 = -1.*t471*t939;
  t1033 = t576*t939*t711;
  t1009 = t471*t939;
  t1013 = -1.*t576*t939*t676;
  t1040 = -1.*t933*t778;
  t1045 = t933*t711;
  t795 = t576*t794*t685;
  t807 = -1.*t798*t806;
  t816 = t795 + t807;
  t820 = 1.1*t634*t816;
  t835 = t794*t831;
  t847 = -1.*t798*t842;
  t851 = t835 + t847;
  t856 = 1.1*t755*t851;
  t860 = t794*t859;
  t864 = -1.*t798*t863;
  t865 = t860 + t864;
  t866 = 1.1*t789*t865;
  t867 = t820 + t856 + t866;
  t869 = t576*t685*t798;
  t870 = t794*t806;
  t875 = t869 + t870;
  t880 = t798*t831;
  t881 = t794*t842;
  t887 = t880 + t881;
  t889 = t798*t859;
  t891 = t794*t863;
  t892 = t889 + t891;
  t960 = t634*t959;
  t968 = t806*t967;
  t970 = t936 + t960 + t968;
  t971 = t755*t970;
  t973 = -1.*t959*t755;
  t975 = -1.*t967*t842;
  t976 = t972 + t973 + t975;
  t978 = t634*t976;
  t979 = t971 + t978;
  t982 = t959*t755;
  t983 = t967*t842;
  t984 = t981 + t982 + t983;
  t985 = t789*t984;
  t987 = -1.*t959*t789;
  t988 = -1.*t967*t863;
  t989 = t986 + t987 + t988;
  t990 = t755*t989;
  t991 = t985 + t990;
  t994 = -1.*t634*t959;
  t998 = -1.*t806*t967;
  t999 = t993 + t994 + t998;
  t1000 = t789*t999;
  t1002 = t959*t789;
  t1003 = t967*t863;
  t1004 = t1001 + t1002 + t1003;
  t1005 = t634*t1004;
  t1006 = t1000 + t1005;
  t1010 = -1.*t576*t608*t954;
  t1011 = t1009 + t1010 + t936;
  t1012 = t831*t1011;
  t1014 = -1.*t954*t753;
  t1015 = t1013 + t1014 + t972;
  t1016 = t576*t685*t1015;
  t1017 = t1012 + t1016;
  t1020 = t954*t753;
  t1021 = t1019 + t1020 + t981;
  t1022 = t859*t1021;
  t1024 = -1.*t954*t781;
  t1025 = t1023 + t986 + t1024;
  t1026 = t831*t1025;
  t1027 = t1022 + t1026;
  t1030 = t576*t608*t954;
  t1031 = t1029 + t1030 + t993;
  t1032 = t859*t1031;
  t1034 = t954*t781;
  t1035 = t1033 + t1001 + t1034;
  t1036 = t576*t685*t1035;
  t1037 = t1032 + t1036;
  t1041 = t471*t921*t711;
  t1042 = t1040 + t1023 + t1041;
  t1043 = t576*t676*t1042;
  t1044 = -1.*t471*t921*t676;
  t1046 = t1019 + t1044 + t1045;
  t1047 = t576*t711*t1046;
  t1048 = t1043 + t1047;
  t1051 = -1.*t576*t921;
  t1052 = t1029 + t1051;
  t1053 = t576*t1052*t711;
  t1054 = t933*t778;
  t1056 = -1.*t471*t921*t711;
  t1057 = t1054 + t1033 + t1056;
  t1058 = t471*t1057;
  t1059 = t1053 + t1058;
  t1062 = t576*t921;
  t1063 = t1009 + t1062;
  t1064 = t576*t1063*t676;
  t1065 = t471*t921*t676;
  t1066 = -1.*t933*t711;
  t1067 = t1013 + t1065 + t1066;
  t1068 = t471*t1067;
  t1069 = t1064 + t1068;
  t1073 = -1.*t919*t711;
  t1074 = t1040 + t1073;
  t1075 = t711*t1074;
  t1076 = t919*t676;
  t1078 = t1076 + t1045;
  t1079 = t778*t1078;
  t1080 = t1075 + t1079;
  t1083 = -0.072*t676;
  t1084 = -0.19875*t778;
  t1085 = t1083 + t1084;
  t1089 = t661*t912;
  t1090 = 0.3455*t667;
  t1091 = t906*t667;
  t1092 = t1089 + t1090 + t1091;
  t1094 = -0.3455*t661;
  t1095 = -1.*t661*t906;
  t1096 = t912*t667;
  t1097 = t1094 + t1095 + t1096;
  t879 = 1.1*t634*t875;
  t888 = 1.1*t755*t887;
  t893 = 1.1*t789*t892;
  t894 = t879 + t888 + t893;
  t1116 = 1.1*t875*t816;
  t1118 = 1.1*t887*t851;
  t1119 = 1.1*t892*t865;
  t1120 = t1116 + t1118 + t1119;
  t980 = 1.1*t789*t979;
  t992 = 1.1*t634*t991;
  t1007 = 1.1*t755*t1006;
  t1008 = t980 + t992 + t1007;
  t1121 = 1.1*t865*t979;
  t1122 = 1.1*t816*t991;
  t1123 = 1.1*t851*t1006;
  t1124 = t1121 + t1122 + t1123;
  t1153 = 1.1*t892*t979;
  t1154 = 1.1*t875*t991;
  t1155 = 1.1*t887*t1006;
  t1156 = t1153 + t1154 + t1155;
  t639 = Power(t634,2);
  t1232 = 0.016226*t634;
  t1018 = 1.1*t789*t1017;
  t1028 = 1.1*t634*t1027;
  t1038 = 1.1*t755*t1037;
  t1039 = t1018 + t1028 + t1038;
  t1125 = 1.1*t1017*t865;
  t1126 = 1.1*t816*t1027;
  t1127 = 1.1*t851*t1037;
  t1128 = t1125 + t1126 + t1127;
  t1157 = 1.1*t1017*t892;
  t1158 = 1.1*t875*t1027;
  t1159 = 1.1*t887*t1037;
  t1160 = t1157 + t1158 + t1159;
  t1194 = 0.016226*t576*t685*t634;
  t1176 = 0.016077*t755;
  t1177 = 0.000213*t789;
  t1181 = t1176 + t1177;
  t1183 = 0.000213*t755;
  t1184 = 0.000409*t789;
  t1185 = t1183 + t1184;
  t1203 = 1.1*t1017*t979;
  t1204 = 1.1*t1027*t991;
  t1205 = 1.1*t1037*t1006;
  t1199 = 0.000409*t859;
  t1200 = 0.000213*t831;
  t1201 = t1199 + t1200;
  t1195 = 0.000213*t859;
  t1196 = 0.016077*t831;
  t1197 = t1195 + t1196;
  t1212 = 0.000213*t576*t676;
  t1213 = 0.000409*t576*t711;
  t1214 = t1212 + t1213;
  t1208 = 0.016077*t576*t676;
  t1209 = 0.000213*t576*t711;
  t1210 = t1208 + t1209;
  t1224 = 0.000409*t778;
  t1225 = 0.000213*t711;
  t1226 = t1224 + t1225;
  t1220 = 0.000213*t778;
  t1221 = 0.016077*t711;
  t1222 = t1220 + t1221;
  t1267 = 0.016226*t576*t685;
  t1049 = 1.1*t1048*t634;
  t1061 = 1.1*t1059*t755;
  t1070 = 1.1*t1069*t789;
  t1071 = t1049 + t1061 + t1070;
  t1129 = 1.1*t1048*t816;
  t1130 = 1.1*t1059*t851;
  t1131 = 1.1*t1069*t865;
  t1132 = t1129 + t1130 + t1131;
  t1161 = 1.1*t1048*t875;
  t1162 = 1.1*t1059*t887;
  t1163 = 1.1*t1069*t892;
  t1164 = t1161 + t1162 + t1163;
  t1207 = 0.016226*t471*t634;
  t1216 = 1.1*t1069*t979;
  t1217 = 1.1*t1048*t991;
  t1218 = 1.1*t1059*t1006;
  t1254 = 0.016226*t576*t685*t471;
  t1257 = 1.1*t1069*t1017;
  t1258 = 1.1*t1048*t1027;
  t1259 = 1.1*t1059*t1037;
  t1297 = 0.016226*t471;
  t1081 = 1.1*t1080*t634;
  t1086 = 1.1*t1085*t755;
  t1087 = 0.13942500000000005*t711*t789;
  t1088 = t1081 + t1086 + t1087;
  t1133 = 1.1*t1080*t816;
  t1134 = 1.1*t1085*t851;
  t1135 = 0.13942500000000005*t711*t865;
  t1136 = t1133 + t1134 + t1135;
  t1165 = 1.1*t1080*t875;
  t1166 = 1.1*t1085*t887;
  t1167 = 0.13942500000000005*t711*t892;
  t1168 = t1165 + t1166 + t1167;
  t1228 = 0.13942500000000005*t711*t979;
  t1229 = 1.1*t1080*t991;
  t1230 = 1.1*t1085*t1006;
  t1263 = 0.13942500000000005*t711*t1017;
  t1264 = 1.1*t1080*t1027;
  t1265 = 1.1*t1085*t1037;
  t1293 = 1.1*t1085*t1059;
  t1294 = 0.13942500000000005*t711*t1069;
  t1295 = 1.1*t1048*t1080;
  t1093 = 1.1*t1092*t755;
  t1098 = 1.1*t1097*t789;
  t1099 = t1093 + t1098;
  t1137 = 1.1*t1092*t851;
  t1138 = 1.1*t1097*t865;
  t1139 = t1137 + t1138;
  t1169 = 1.1*t1092*t887;
  t1170 = 1.1*t1097*t892;
  t1171 = t1169 + t1170;
  t1233 = 1.1*t1097*t979;
  t1234 = 1.1*t1092*t1006;
  t1235 = t1232 + t1233 + t1234;
  t1268 = 1.1*t1097*t1017;
  t1269 = 1.1*t1092*t1037;
  t1270 = t1267 + t1268 + t1269;
  t1298 = 1.1*t1092*t1059;
  t1299 = 1.1*t1097*t1069;
  t1300 = t1297 + t1298 + t1299;
  t1322 = 0.13942500000000005*t711*t1097;
  t1323 = 1.1*t1092*t1085;
  t1324 = t1322 + t1323;
  t1100 = -0.23044560000000003*t755;
  t1102 = -0.005498899999999974*t789;
  t1106 = t1100 + t1102;
  t1140 = -0.23044560000000003*t851;
  t1141 = -0.005498899999999974*t865;
  t1142 = t1140 + t1141;
  t1172 = -0.23044560000000003*t887;
  t1173 = -0.005498899999999974*t892;
  t1174 = t1172 + t1173;
  t1236 = -0.005498899999999974*t979;
  t1237 = -0.23044560000000003*t1006;
  t1238 = t1232 + t1236 + t1237;
  t1271 = -0.005498899999999974*t1017;
  t1272 = -0.23044560000000003*t1037;
  t1273 = t1267 + t1271 + t1272;
  t1301 = -0.23044560000000003*t1059;
  t1302 = -0.005498899999999974*t1069;
  t1303 = t1297 + t1301 + t1302;
  t1325 = -0.0006969855749999968*t711;
  t1326 = -0.23044560000000003*t1085;
  t1327 = t1325 + t1326;
  t1333 = -0.23044560000000003*t1092;
  t1334 = -0.005498899999999974*t1097;
  t1335 = 0.016226 + t1333 + t1334;
  p_output1[0]=1.1*t639 + 1.1*Power(t755,2) + 1.1*Power(t789,2);
  p_output1[1]=t867;
  p_output1[2]=t894;
  p_output1[3]=t1008;
  p_output1[4]=t1039;
  p_output1[5]=t1071;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=t1088;
  p_output1[16]=t1099;
  p_output1[17]=t1106;
  p_output1[18]=t867;
  p_output1[19]=1.1*Power(t816,2) + 1.1*Power(t851,2) + 1.1*Power(t865,2);
  p_output1[20]=t1120;
  p_output1[21]=t1124;
  p_output1[22]=t1128;
  p_output1[23]=t1132;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=0;
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=t1136;
  p_output1[34]=t1139;
  p_output1[35]=t1142;
  p_output1[36]=t894;
  p_output1[37]=t1120;
  p_output1[38]=1.1*Power(t875,2) + 1.1*Power(t887,2) + 1.1*Power(t892,2);
  p_output1[39]=t1156;
  p_output1[40]=t1160;
  p_output1[41]=t1164;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=t1168;
  p_output1[52]=t1171;
  p_output1[53]=t1174;
  p_output1[54]=t1008;
  p_output1[55]=t1124;
  p_output1[56]=t1156;
  p_output1[57]=1.1*Power(t1006,2) + 0.016226*t639 + t1181*t755 + t1185*t789 + 1.1*Power(t979,2) + 1.1*Power(t991,2);
  p_output1[58]=t1194 + t1203 + t1204 + t1205 + t1197*t755 + t1201*t789;
  p_output1[59]=t1207 + t1216 + t1217 + t1218 + t1210*t755 + t1214*t789;
  p_output1[60]=0;
  p_output1[61]=0;
  p_output1[62]=0;
  p_output1[63]=0;
  p_output1[64]=0;
  p_output1[65]=0;
  p_output1[66]=0;
  p_output1[67]=0;
  p_output1[68]=0;
  p_output1[69]=t1228 + t1229 + t1230 + t1222*t755 + t1226*t789;
  p_output1[70]=t1235;
  p_output1[71]=t1238;
  p_output1[72]=t1039;
  p_output1[73]=t1128;
  p_output1[74]=t1160;
  p_output1[75]=t1194 + t1203 + t1204 + t1205 + t1181*t831 + t1185*t859;
  p_output1[76]=1.1*Power(t1017,2) + 1.1*Power(t1027,2) + 1.1*Power(t1037,2) + 0.016226*Power(t576,2)*Power(t685,2) + t1197*t831 + t1201*t859;
  p_output1[77]=t1254 + t1257 + t1258 + t1259 + t1210*t831 + t1214*t859;
  p_output1[78]=0;
  p_output1[79]=0;
  p_output1[80]=0;
  p_output1[81]=0;
  p_output1[82]=0;
  p_output1[83]=0;
  p_output1[84]=0;
  p_output1[85]=0;
  p_output1[86]=0;
  p_output1[87]=t1263 + t1264 + t1265 + t1222*t831 + t1226*t859;
  p_output1[88]=t1270;
  p_output1[89]=t1273;
  p_output1[90]=t1071;
  p_output1[91]=t1132;
  p_output1[92]=t1164;
  p_output1[93]=t1207 + t1216 + t1217 + t1218 + t1181*t576*t676 + t1185*t576*t711;
  p_output1[94]=t1254 + t1257 + t1258 + t1259 + t1197*t576*t676 + t1201*t576*t711;
  p_output1[95]=1.1*Power(t1048,2) + 1.1*Power(t1059,2) + 1.1*Power(t1069,2) + 0.016226*Power(t471,2) + t1210*t576*t676 + t1214*t576*t711;
  p_output1[96]=0;
  p_output1[97]=0;
  p_output1[98]=0;
  p_output1[99]=0;
  p_output1[100]=0;
  p_output1[101]=0;
  p_output1[102]=0;
  p_output1[103]=0;
  p_output1[104]=0;
  p_output1[105]=t1293 + t1294 + t1295 + t1222*t576*t676 + t1226*t576*t711;
  p_output1[106]=t1300;
  p_output1[107]=t1303;
  p_output1[108]=0;
  p_output1[109]=0;
  p_output1[110]=0;
  p_output1[111]=0;
  p_output1[112]=0;
  p_output1[113]=0;
  p_output1[114]=0;
  p_output1[115]=0;
  p_output1[116]=0;
  p_output1[117]=0;
  p_output1[118]=0;
  p_output1[119]=0;
  p_output1[120]=0;
  p_output1[121]=0;
  p_output1[122]=0;
  p_output1[123]=0;
  p_output1[124]=0;
  p_output1[125]=0;
  p_output1[126]=0;
  p_output1[127]=0;
  p_output1[128]=0;
  p_output1[129]=0;
  p_output1[130]=0;
  p_output1[131]=0;
  p_output1[132]=0;
  p_output1[133]=0;
  p_output1[134]=0;
  p_output1[135]=0;
  p_output1[136]=0;
  p_output1[137]=0;
  p_output1[138]=0;
  p_output1[139]=0;
  p_output1[140]=0;
  p_output1[141]=0;
  p_output1[142]=0;
  p_output1[143]=0;
  p_output1[144]=0;
  p_output1[145]=0;
  p_output1[146]=0;
  p_output1[147]=0;
  p_output1[148]=0;
  p_output1[149]=0;
  p_output1[150]=0;
  p_output1[151]=0;
  p_output1[152]=0;
  p_output1[153]=0;
  p_output1[154]=0;
  p_output1[155]=0;
  p_output1[156]=0;
  p_output1[157]=0;
  p_output1[158]=0;
  p_output1[159]=0;
  p_output1[160]=0;
  p_output1[161]=0;
  p_output1[162]=0;
  p_output1[163]=0;
  p_output1[164]=0;
  p_output1[165]=0;
  p_output1[166]=0;
  p_output1[167]=0;
  p_output1[168]=0;
  p_output1[169]=0;
  p_output1[170]=0;
  p_output1[171]=0;
  p_output1[172]=0;
  p_output1[173]=0;
  p_output1[174]=0;
  p_output1[175]=0;
  p_output1[176]=0;
  p_output1[177]=0;
  p_output1[178]=0;
  p_output1[179]=0;
  p_output1[180]=0;
  p_output1[181]=0;
  p_output1[182]=0;
  p_output1[183]=0;
  p_output1[184]=0;
  p_output1[185]=0;
  p_output1[186]=0;
  p_output1[187]=0;
  p_output1[188]=0;
  p_output1[189]=0;
  p_output1[190]=0;
  p_output1[191]=0;
  p_output1[192]=0;
  p_output1[193]=0;
  p_output1[194]=0;
  p_output1[195]=0;
  p_output1[196]=0;
  p_output1[197]=0;
  p_output1[198]=0;
  p_output1[199]=0;
  p_output1[200]=0;
  p_output1[201]=0;
  p_output1[202]=0;
  p_output1[203]=0;
  p_output1[204]=0;
  p_output1[205]=0;
  p_output1[206]=0;
  p_output1[207]=0;
  p_output1[208]=0;
  p_output1[209]=0;
  p_output1[210]=0;
  p_output1[211]=0;
  p_output1[212]=0;
  p_output1[213]=0;
  p_output1[214]=0;
  p_output1[215]=0;
  p_output1[216]=0;
  p_output1[217]=0;
  p_output1[218]=0;
  p_output1[219]=0;
  p_output1[220]=0;
  p_output1[221]=0;
  p_output1[222]=0;
  p_output1[223]=0;
  p_output1[224]=0;
  p_output1[225]=0;
  p_output1[226]=0;
  p_output1[227]=0;
  p_output1[228]=0;
  p_output1[229]=0;
  p_output1[230]=0;
  p_output1[231]=0;
  p_output1[232]=0;
  p_output1[233]=0;
  p_output1[234]=0;
  p_output1[235]=0;
  p_output1[236]=0;
  p_output1[237]=0;
  p_output1[238]=0;
  p_output1[239]=0;
  p_output1[240]=0;
  p_output1[241]=0;
  p_output1[242]=0;
  p_output1[243]=0;
  p_output1[244]=0;
  p_output1[245]=0;
  p_output1[246]=0;
  p_output1[247]=0;
  p_output1[248]=0;
  p_output1[249]=0;
  p_output1[250]=0;
  p_output1[251]=0;
  p_output1[252]=0;
  p_output1[253]=0;
  p_output1[254]=0;
  p_output1[255]=0;
  p_output1[256]=0;
  p_output1[257]=0;
  p_output1[258]=0;
  p_output1[259]=0;
  p_output1[260]=0;
  p_output1[261]=0;
  p_output1[262]=0;
  p_output1[263]=0;
  p_output1[264]=0;
  p_output1[265]=0;
  p_output1[266]=0;
  p_output1[267]=0;
  p_output1[268]=0;
  p_output1[269]=0;
  p_output1[270]=t1088;
  p_output1[271]=t1136;
  p_output1[272]=t1168;
  p_output1[273]=t1228 + t1229 + t1230 + t1181*t711 + t1185*t778;
  p_output1[274]=t1263 + t1264 + t1265 + t1197*t711 + t1201*t778;
  p_output1[275]=t1293 + t1294 + t1295 + t1210*t711 + t1214*t778;
  p_output1[276]=0;
  p_output1[277]=0;
  p_output1[278]=0;
  p_output1[279]=0;
  p_output1[280]=0;
  p_output1[281]=0;
  p_output1[282]=0;
  p_output1[283]=0;
  p_output1[284]=0;
  p_output1[285]=1.1*Power(t1080,2) + 1.1*Power(t1085,2) + t1222*t711 + 0.01767211875000001*Power(t711,2) + t1226*t778;
  p_output1[286]=t1324;
  p_output1[287]=t1327;
  p_output1[288]=t1099;
  p_output1[289]=t1139;
  p_output1[290]=t1171;
  p_output1[291]=t1235;
  p_output1[292]=t1270;
  p_output1[293]=t1300;
  p_output1[294]=0;
  p_output1[295]=0;
  p_output1[296]=0;
  p_output1[297]=0;
  p_output1[298]=0;
  p_output1[299]=0;
  p_output1[300]=0;
  p_output1[301]=0;
  p_output1[302]=0;
  p_output1[303]=t1324;
  p_output1[304]=0.016226 + 1.1*Power(t1092,2) + 1.1*Power(t1097,2);
  p_output1[305]=t1335;
  p_output1[306]=t1106;
  p_output1[307]=t1142;
  p_output1[308]=t1174;
  p_output1[309]=t1238;
  p_output1[310]=t1273;
  p_output1[311]=t1303;
  p_output1[312]=0;
  p_output1[313]=0;
  p_output1[314]=0;
  p_output1[315]=0;
  p_output1[316]=0;
  p_output1[317]=0;
  p_output1[318]=0;
  p_output1[319]=0;
  p_output1[320]=0;
  p_output1[321]=t1327;
  p_output1[322]=t1335;
  p_output1[323]=0.06453092041870001;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 18, (mwSize) 18, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "Mmat13_b1_description.hh"

namespace SymFunction
{

void Mmat13_b1_description_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
