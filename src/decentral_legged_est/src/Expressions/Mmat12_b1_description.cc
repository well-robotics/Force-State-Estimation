/*
 * Automatically Generated from Mathematica.
 * Sun 22 Sep 2024 09:05:55 GMT-05:00
 */

#include "math2mat.hpp"
#include "mdefs.hpp"

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t527;
  double t450;
  double t548;
  double t567;
  double t412;
  double t552;
  double t593;
  double t589;
  double t471;
  double t553;
  double t561;
  double t576;
  double t600;
  double t608;
  double t609;
  double t624;
  double t633;
  double t667;
  double t673;
  double t648;
  double t652;
  double t653;
  double t660;
  double t661;
  double t662;
  double t676;
  double t677;
  double t683;
  double t703;
  double t707;
  double t709;
  double t716;
  double t733;
  double t743;
  double t754;
  double t755;
  double t756;
  double t758;
  double t762;
  double t763;
  double t806;
  double t807;
  double t808;
  double t818;
  double t819;
  double t820;
  double t822;
  double t827;
  double t830;
  double t799;
  double t801;
  double t803;
  double t804;
  double t809;
  double t810;
  double t835;
  double t836;
  double t838;
  double t842;
  double t843;
  double t844;
  double t816;
  double t831;
  double t832;
  double t840;
  double t847;
  double t848;
  double t851;
  double t852;
  double t853;
  double t834;
  double t858;
  double t865;
  double t871;
  double t883;
  double t889;
  double t927;
  double t922;
  double t908;
  double t912;
  double t898;
  double t902;
  double t940;
  double t935;
  double t672;
  double t684;
  double t685;
  double t698;
  double t711;
  double t751;
  double t752;
  double t753;
  double t757;
  double t764;
  double t765;
  double t773;
  double t774;
  double t775;
  double t778;
  double t779;
  double t781;
  double t788;
  double t789;
  double t792;
  double t793;
  double t794;
  double t849;
  double t854;
  double t856;
  double t857;
  double t859;
  double t860;
  double t861;
  double t862;
  double t863;
  double t866;
  double t867;
  double t869;
  double t870;
  double t872;
  double t873;
  double t875;
  double t879;
  double t880;
  double t884;
  double t885;
  double t887;
  double t888;
  double t891;
  double t892;
  double t893;
  double t894;
  double t895;
  double t899;
  double t900;
  double t901;
  double t903;
  double t904;
  double t905;
  double t906;
  double t909;
  double t910;
  double t911;
  double t913;
  double t914;
  double t919;
  double t920;
  double t924;
  double t925;
  double t926;
  double t929;
  double t930;
  double t931;
  double t932;
  double t936;
  double t937;
  double t938;
  double t939;
  double t941;
  double t942;
  double t943;
  double t945;
  double t946;
  double t947;
  double t948;
  double t949;
  double t954;
  double t958;
  double t959;
  double t962;
  double t963;
  double t964;
  double t966;
  double t967;
  double t968;
  double t970;
  double t971;
  double t974;
  double t975;
  double t976;
  double t977;
  double t978;
  double t979;
  double t980;
  double t780;
  double t791;
  double t795;
  double t798;
  double t998;
  double t999;
  double t1000;
  double t1001;
  double t864;
  double t881;
  double t896;
  double t897;
  double t1002;
  double t1003;
  double t1004;
  double t1005;
  double t1028;
  double t1029;
  double t1030;
  double t1031;
  double t1052;
  double t1053;
  double t1054;
  double t907;
  double t921;
  double t933;
  double t934;
  double t1006;
  double t1007;
  double t1008;
  double t1009;
  double t1032;
  double t1033;
  double t1034;
  double t1035;
  double t1047;
  double t1048;
  double t1049;
  double t1050;
  double t1055;
  double t1057;
  double t1058;
  double t1059;
  double t1060;
  double t1084;
  double t1085;
  double t1086;
  double t1079;
  double t1080;
  double t1081;
  double t1082;
  double t1069;
  double t1070;
  double t1071;
  double t1072;
  double t1074;
  double t1075;
  double t1076;
  double t1077;
  double t1088;
  double t1089;
  double t1090;
  double t1091;
  double t1098;
  double t1099;
  double t1100;
  double t1101;
  double t1093;
  double t1094;
  double t1095;
  double t1096;
  double t1107;
  double t1108;
  double t1109;
  double t1115;
  double t1116;
  double t1117;
  double t1111;
  double t1112;
  double t1113;
  double t944;
  double t960;
  double t972;
  double t973;
  double t1010;
  double t1011;
  double t1012;
  double t1013;
  double t1036;
  double t1037;
  double t1038;
  double t1039;
  double t1103;
  double t1104;
  double t1105;
  double t1143;
  double t1144;
  double t1145;
  double t981;
  double t982;
  double t983;
  double t984;
  double t1014;
  double t1015;
  double t1016;
  double t1017;
  double t1040;
  double t1041;
  double t1042;
  double t1043;
  double t1119;
  double t1120;
  double t1121;
  double t1150;
  double t1151;
  double t1152;
  double t1178;
  double t1179;
  double t1180;
  double t985;
  double t986;
  double t987;
  double t1018;
  double t1019;
  double t1020;
  double t1044;
  double t1045;
  double t1046;
  double t1123;
  double t1124;
  double t1125;
  double t1154;
  double t1155;
  double t1156;
  double t1182;
  double t1183;
  double t1184;
  double t1203;
  double t1204;
  double t1205;
  t527 = Cos(var1[15]);
  t450 = Sin(var1[4]);
  t548 = Cos(var1[4]);
  t567 = Cos(var1[16]);
  t412 = Sin(var1[15]);
  t552 = Sin(var1[5]);
  t593 = Sin(var1[16]);
  t589 = Cos(var1[5]);
  t471 = t412*t450;
  t553 = -1.*t527*t548*t552;
  t561 = t471 + t553;
  t576 = t527*t567*t450;
  t600 = t589*t593;
  t608 = t567*t412*t552;
  t609 = t600 + t608;
  t624 = t548*t609;
  t633 = t576 + t624;
  t667 = Cos(var1[3]);
  t673 = Sin(var1[3]);
  t648 = -1.*t527*t593*t450;
  t652 = t567*t589;
  t653 = -1.*t412*t593*t552;
  t660 = t652 + t653;
  t661 = t548*t660;
  t662 = t648 + t661;
  t676 = t548*t412;
  t677 = t527*t450*t552;
  t683 = t676 + t677;
  t703 = -1.*t567*t589*t412;
  t707 = t593*t552;
  t709 = t703 + t707;
  t716 = t527*t567*t548;
  t733 = -1.*t450*t609;
  t743 = t716 + t733;
  t754 = t589*t412*t593;
  t755 = t567*t552;
  t756 = t754 + t755;
  t758 = -1.*t527*t548*t593;
  t762 = -1.*t450*t660;
  t763 = t758 + t762;
  t806 = -0.051013*t567;
  t807 = 0.00022100000000002673*t593;
  t808 = t806 + t807;
  t818 = -1.*t567;
  t819 = 1. + t818;
  t820 = -0.3455*t819;
  t822 = -0.345721*t567;
  t827 = -0.051013*t593;
  t830 = t820 + t822 + t827;
  t799 = -1.*t527;
  t801 = 1. + t799;
  t803 = 0.072*t801;
  t804 = 0.168695*t527;
  t809 = -1.*t412*t808;
  t810 = t803 + t804 + t809;
  t835 = 0.09669500000000002*t412;
  t836 = t527*t808;
  t838 = t835 + t836;
  t842 = t589*t830;
  t843 = -1.*t810*t552;
  t844 = t842 + t843;
  t816 = t589*t810;
  t831 = t830*t552;
  t832 = t816 + t831;
  t840 = t838*t450;
  t847 = t548*t844;
  t848 = t840 + t847;
  t851 = t548*t838;
  t852 = -1.*t450*t844;
  t853 = t851 + t852;
  t834 = -1.*t527*t589*t832;
  t858 = t832*t709;
  t865 = t527*t589*t832;
  t871 = -1.*t756*t832;
  t883 = -1.*t832*t709;
  t889 = t756*t832;
  t927 = -1.*t527*t838*t593;
  t922 = -1.*t527*t567*t838;
  t908 = t412*t838;
  t912 = t527*t838*t593;
  t898 = -1.*t412*t838;
  t902 = t527*t567*t838;
  t940 = -1.*t830*t593;
  t935 = t567*t830;
  t672 = t527*t667*t589;
  t684 = -1.*t673*t683;
  t685 = t672 + t684;
  t698 = 4.566*t561*t685;
  t711 = t667*t709;
  t751 = -1.*t673*t743;
  t752 = t711 + t751;
  t753 = 4.566*t633*t752;
  t757 = t667*t756;
  t764 = -1.*t673*t763;
  t765 = t757 + t764;
  t773 = 4.566*t662*t765;
  t774 = t698 + t753 + t773;
  t775 = t527*t589*t673;
  t778 = t667*t683;
  t779 = t775 + t778;
  t781 = t673*t709;
  t788 = t667*t743;
  t789 = t781 + t788;
  t792 = t673*t756;
  t793 = t667*t763;
  t794 = t792 + t793;
  t849 = -1.*t561*t848;
  t854 = -1.*t683*t853;
  t856 = t834 + t849 + t854;
  t857 = t633*t856;
  t859 = t633*t848;
  t860 = t743*t853;
  t861 = t858 + t859 + t860;
  t862 = t561*t861;
  t863 = t857 + t862;
  t866 = t561*t848;
  t867 = t683*t853;
  t869 = t865 + t866 + t867;
  t870 = t662*t869;
  t872 = -1.*t848*t662;
  t873 = -1.*t853*t763;
  t875 = t871 + t872 + t873;
  t879 = t561*t875;
  t880 = t870 + t879;
  t884 = -1.*t633*t848;
  t885 = -1.*t743*t853;
  t887 = t883 + t884 + t885;
  t888 = t662*t887;
  t891 = t848*t662;
  t892 = t853*t763;
  t893 = t889 + t891 + t892;
  t894 = t633*t893;
  t895 = t888 + t894;
  t899 = t527*t552*t844;
  t900 = t898 + t899 + t834;
  t901 = t709*t900;
  t903 = t609*t844;
  t904 = t902 + t903 + t858;
  t905 = t527*t589*t904;
  t906 = t901 + t905;
  t909 = -1.*t527*t552*t844;
  t910 = t908 + t909 + t865;
  t911 = t756*t910;
  t913 = -1.*t844*t660;
  t914 = t912 + t871 + t913;
  t919 = t527*t589*t914;
  t920 = t911 + t919;
  t924 = -1.*t609*t844;
  t925 = t922 + t924 + t883;
  t926 = t756*t925;
  t929 = t844*t660;
  t930 = t927 + t889 + t929;
  t931 = t709*t930;
  t932 = t926 + t931;
  t936 = t412*t810*t593;
  t937 = t935 + t927 + t936;
  t938 = t527*t567*t937;
  t939 = t567*t412*t810;
  t941 = t922 + t939 + t940;
  t942 = -1.*t527*t593*t941;
  t943 = t938 + t942;
  t945 = t527*t810;
  t946 = t908 + t945;
  t947 = -1.*t527*t946*t593;
  t948 = -1.*t567*t830;
  t949 = -1.*t412*t810*t593;
  t954 = t948 + t912 + t949;
  t958 = t412*t954;
  t959 = t947 + t958;
  t962 = -1.*t527*t810;
  t963 = t898 + t962;
  t964 = t527*t567*t963;
  t966 = -1.*t567*t412*t810;
  t967 = t830*t593;
  t968 = t902 + t966 + t967;
  t970 = t412*t968;
  t971 = t964 + t970;
  t974 = -1.*t567*t808;
  t975 = t974 + t940;
  t976 = t567*t975;
  t977 = -1.*t808*t593;
  t978 = t935 + t977;
  t979 = t593*t978;
  t980 = t976 + t979;
  t780 = 4.566*t561*t779;
  t791 = 4.566*t633*t789;
  t795 = 4.566*t662*t794;
  t798 = t780 + t791 + t795;
  t998 = 4.566*t779*t685;
  t999 = 4.566*t789*t752;
  t1000 = 4.566*t794*t765;
  t1001 = t998 + t999 + t1000;
  t864 = 4.566*t662*t863;
  t881 = 4.566*t633*t880;
  t896 = 4.566*t561*t895;
  t897 = t864 + t881 + t896;
  t1002 = 4.566*t765*t863;
  t1003 = 4.566*t752*t880;
  t1004 = 4.566*t685*t895;
  t1005 = t1002 + t1003 + t1004;
  t1028 = 4.566*t794*t863;
  t1029 = 4.566*t789*t880;
  t1030 = 4.566*t779*t895;
  t1031 = t1028 + t1029 + t1030;
  t1052 = 0.047677*t561;
  t1053 = 0.006348*t633;
  t1054 = 0.00013*t662;
  t907 = 4.566*t662*t906;
  t921 = 4.566*t633*t920;
  t933 = 4.566*t561*t932;
  t934 = t907 + t921 + t933;
  t1006 = 4.566*t906*t765;
  t1007 = 4.566*t752*t920;
  t1008 = 4.566*t685*t932;
  t1009 = t1006 + t1007 + t1008;
  t1032 = 4.566*t906*t794;
  t1033 = 4.566*t789*t920;
  t1034 = 4.566*t779*t932;
  t1035 = t1032 + t1033 + t1034;
  t1047 = 0.006348*t561;
  t1048 = 0.009317*t633;
  t1049 = -0.002347*t662;
  t1050 = t1047 + t1048 + t1049;
  t1055 = t1052 + t1053 + t1054;
  t1057 = 0.00013*t561;
  t1058 = -0.002347*t633;
  t1059 = 0.045815*t662;
  t1060 = t1057 + t1058 + t1059;
  t1084 = 4.566*t906*t863;
  t1085 = 4.566*t920*t880;
  t1086 = 4.566*t932*t895;
  t1079 = 0.00013*t527*t589;
  t1080 = 0.045815*t756;
  t1081 = -0.002347*t709;
  t1082 = t1079 + t1080 + t1081;
  t1069 = 0.047677*t527*t589;
  t1070 = 0.00013*t756;
  t1071 = 0.006348*t709;
  t1072 = t1069 + t1070 + t1071;
  t1074 = 0.006348*t527*t589;
  t1075 = -0.002347*t756;
  t1076 = 0.009317*t709;
  t1077 = t1074 + t1075 + t1076;
  t1088 = 0.006348*t527*t567;
  t1089 = 0.047677*t412;
  t1090 = -0.00013*t527*t593;
  t1091 = t1088 + t1089 + t1090;
  t1098 = -0.002347*t527*t567;
  t1099 = 0.00013*t412;
  t1100 = -0.045815*t527*t593;
  t1101 = t1098 + t1099 + t1100;
  t1093 = 0.009317*t527*t567;
  t1094 = 0.006348*t412;
  t1095 = 0.002347*t527*t593;
  t1096 = t1093 + t1094 + t1095;
  t1107 = 0.00013*t567;
  t1108 = 0.006348*t593;
  t1109 = t1107 + t1108;
  t1115 = 0.045815*t567;
  t1116 = -0.002347*t593;
  t1117 = t1115 + t1116;
  t1111 = -0.002347*t567;
  t1112 = 0.009317*t593;
  t1113 = t1111 + t1112;
  t944 = 4.566*t943*t561;
  t960 = 4.566*t959*t633;
  t972 = 4.566*t971*t662;
  t973 = t944 + t960 + t972;
  t1010 = 4.566*t943*t685;
  t1011 = 4.566*t959*t752;
  t1012 = 4.566*t971*t765;
  t1013 = t1010 + t1011 + t1012;
  t1036 = 4.566*t943*t779;
  t1037 = 4.566*t959*t789;
  t1038 = 4.566*t971*t794;
  t1039 = t1036 + t1037 + t1038;
  t1103 = 4.566*t971*t863;
  t1104 = 4.566*t959*t880;
  t1105 = 4.566*t943*t895;
  t1143 = 4.566*t971*t906;
  t1144 = 4.566*t959*t920;
  t1145 = 4.566*t943*t932;
  t981 = 4.566*t980*t561;
  t982 = 0.44150937000000007*t567*t633;
  t983 = -0.44150937000000007*t593*t662;
  t984 = t981 + t982 + t983;
  t1014 = 4.566*t980*t685;
  t1015 = 0.44150937000000007*t567*t752;
  t1016 = -0.44150937000000007*t593*t765;
  t1017 = t1014 + t1015 + t1016;
  t1040 = 4.566*t980*t779;
  t1041 = 0.44150937000000007*t567*t789;
  t1042 = -0.44150937000000007*t593*t794;
  t1043 = t1040 + t1041 + t1042;
  t1119 = -0.44150937000000007*t593*t863;
  t1120 = 0.44150937000000007*t567*t880;
  t1121 = 4.566*t980*t895;
  t1150 = -0.44150937000000007*t593*t906;
  t1151 = 0.44150937000000007*t567*t920;
  t1152 = 4.566*t980*t932;
  t1178 = 0.44150937000000007*t567*t959;
  t1179 = -0.44150937000000007*t593*t971;
  t1180 = 4.566*t943*t980;
  t985 = 0.001009086000000122*t633;
  t986 = -0.232925358*t662;
  t987 = t985 + t986;
  t1018 = 0.001009086000000122*t752;
  t1019 = -0.232925358*t765;
  t1020 = t1018 + t1019;
  t1044 = 0.001009086000000122*t789;
  t1045 = -0.232925358*t794;
  t1046 = t1044 + t1045;
  t1123 = -0.232925358*t863;
  t1124 = 0.001009086000000122*t880;
  t1125 = t1052 + t1053 + t1054 + t1123 + t1124;
  t1154 = -0.232925358*t906;
  t1155 = 0.001009086000000122*t920;
  t1156 = t1069 + t1070 + t1071 + t1154 + t1155;
  t1182 = 0.001009086000000122*t959;
  t1183 = -0.232925358*t971;
  t1184 = t1088 + t1089 + t1090 + t1182 + t1183;
  t1203 = 0.0002275735707700118*t567;
  t1204 = 0.028870717491810003*t593;
  t1205 = t1203 + t1204;
  p_output1[0]=4.566*Power(t561,2) + 4.566*Power(t633,2) + 4.566*Power(t662,2);
  p_output1[1]=t774;
  p_output1[2]=t798;
  p_output1[3]=t897;
  p_output1[4]=t934;
  p_output1[5]=t973;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=t984;
  p_output1[16]=t987;
  p_output1[17]=0;
  p_output1[18]=t774;
  p_output1[19]=4.566*Power(t685,2) + 4.566*Power(t752,2) + 4.566*Power(t765,2);
  p_output1[20]=t1001;
  p_output1[21]=t1005;
  p_output1[22]=t1009;
  p_output1[23]=t1013;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=0;
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=t1017;
  p_output1[34]=t1020;
  p_output1[35]=0;
  p_output1[36]=t798;
  p_output1[37]=t1001;
  p_output1[38]=4.566*Power(t779,2) + 4.566*Power(t789,2) + 4.566*Power(t794,2);
  p_output1[39]=t1031;
  p_output1[40]=t1035;
  p_output1[41]=t1039;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=t1043;
  p_output1[52]=t1046;
  p_output1[53]=0;
  p_output1[54]=t897;
  p_output1[55]=t1005;
  p_output1[56]=t1031;
  p_output1[57]=t1055*t561 + t1050*t633 + t1060*t662 + 4.566*Power(t863,2) + 4.566*Power(t880,2) + 4.566*Power(t895,2);
  p_output1[58]=t1084 + t1085 + t1086 + t1072*t561 + t1077*t633 + t1082*t662;
  p_output1[59]=t1103 + t1104 + t1105 + t1091*t561 + t1096*t633 + t1101*t662;
  p_output1[60]=0;
  p_output1[61]=0;
  p_output1[62]=0;
  p_output1[63]=0;
  p_output1[64]=0;
  p_output1[65]=0;
  p_output1[66]=0;
  p_output1[67]=0;
  p_output1[68]=0;
  p_output1[69]=t1119 + t1120 + t1121 + t1109*t561 + t1113*t633 + t1117*t662;
  p_output1[70]=t1125;
  p_output1[71]=0;
  p_output1[72]=t934;
  p_output1[73]=t1009;
  p_output1[74]=t1035;
  p_output1[75]=t1084 + t1085 + t1086 + t1055*t527*t589 + t1050*t709 + t1060*t756;
  p_output1[76]=t1072*t527*t589 + t1077*t709 + t1082*t756 + 4.566*Power(t906,2) + 4.566*Power(t920,2) + 4.566*Power(t932,2);
  p_output1[77]=t1143 + t1144 + t1145 + t1091*t527*t589 + t1096*t709 + t1101*t756;
  p_output1[78]=0;
  p_output1[79]=0;
  p_output1[80]=0;
  p_output1[81]=0;
  p_output1[82]=0;
  p_output1[83]=0;
  p_output1[84]=0;
  p_output1[85]=0;
  p_output1[86]=0;
  p_output1[87]=t1150 + t1151 + t1152 + t1109*t527*t589 + t1113*t709 + t1117*t756;
  p_output1[88]=t1156;
  p_output1[89]=0;
  p_output1[90]=t973;
  p_output1[91]=t1013;
  p_output1[92]=t1039;
  p_output1[93]=t1103 + t1104 + t1105 + t1055*t412 + t1050*t527*t567 - 1.*t1060*t527*t593;
  p_output1[94]=t1143 + t1144 + t1145 + t1072*t412 + t1077*t527*t567 - 1.*t1082*t527*t593;
  p_output1[95]=t1091*t412 + t1096*t527*t567 - 1.*t1101*t527*t593 + 4.566*Power(t943,2) + 4.566*Power(t959,2) + 4.566*Power(t971,2);
  p_output1[96]=0;
  p_output1[97]=0;
  p_output1[98]=0;
  p_output1[99]=0;
  p_output1[100]=0;
  p_output1[101]=0;
  p_output1[102]=0;
  p_output1[103]=0;
  p_output1[104]=0;
  p_output1[105]=t1178 + t1179 + t1180 + t1109*t412 + t1113*t527*t567 - 1.*t1117*t527*t593;
  p_output1[106]=t1184;
  p_output1[107]=0;
  p_output1[108]=0;
  p_output1[109]=0;
  p_output1[110]=0;
  p_output1[111]=0;
  p_output1[112]=0;
  p_output1[113]=0;
  p_output1[114]=0;
  p_output1[115]=0;
  p_output1[116]=0;
  p_output1[117]=0;
  p_output1[118]=0;
  p_output1[119]=0;
  p_output1[120]=0;
  p_output1[121]=0;
  p_output1[122]=0;
  p_output1[123]=0;
  p_output1[124]=0;
  p_output1[125]=0;
  p_output1[126]=0;
  p_output1[127]=0;
  p_output1[128]=0;
  p_output1[129]=0;
  p_output1[130]=0;
  p_output1[131]=0;
  p_output1[132]=0;
  p_output1[133]=0;
  p_output1[134]=0;
  p_output1[135]=0;
  p_output1[136]=0;
  p_output1[137]=0;
  p_output1[138]=0;
  p_output1[139]=0;
  p_output1[140]=0;
  p_output1[141]=0;
  p_output1[142]=0;
  p_output1[143]=0;
  p_output1[144]=0;
  p_output1[145]=0;
  p_output1[146]=0;
  p_output1[147]=0;
  p_output1[148]=0;
  p_output1[149]=0;
  p_output1[150]=0;
  p_output1[151]=0;
  p_output1[152]=0;
  p_output1[153]=0;
  p_output1[154]=0;
  p_output1[155]=0;
  p_output1[156]=0;
  p_output1[157]=0;
  p_output1[158]=0;
  p_output1[159]=0;
  p_output1[160]=0;
  p_output1[161]=0;
  p_output1[162]=0;
  p_output1[163]=0;
  p_output1[164]=0;
  p_output1[165]=0;
  p_output1[166]=0;
  p_output1[167]=0;
  p_output1[168]=0;
  p_output1[169]=0;
  p_output1[170]=0;
  p_output1[171]=0;
  p_output1[172]=0;
  p_output1[173]=0;
  p_output1[174]=0;
  p_output1[175]=0;
  p_output1[176]=0;
  p_output1[177]=0;
  p_output1[178]=0;
  p_output1[179]=0;
  p_output1[180]=0;
  p_output1[181]=0;
  p_output1[182]=0;
  p_output1[183]=0;
  p_output1[184]=0;
  p_output1[185]=0;
  p_output1[186]=0;
  p_output1[187]=0;
  p_output1[188]=0;
  p_output1[189]=0;
  p_output1[190]=0;
  p_output1[191]=0;
  p_output1[192]=0;
  p_output1[193]=0;
  p_output1[194]=0;
  p_output1[195]=0;
  p_output1[196]=0;
  p_output1[197]=0;
  p_output1[198]=0;
  p_output1[199]=0;
  p_output1[200]=0;
  p_output1[201]=0;
  p_output1[202]=0;
  p_output1[203]=0;
  p_output1[204]=0;
  p_output1[205]=0;
  p_output1[206]=0;
  p_output1[207]=0;
  p_output1[208]=0;
  p_output1[209]=0;
  p_output1[210]=0;
  p_output1[211]=0;
  p_output1[212]=0;
  p_output1[213]=0;
  p_output1[214]=0;
  p_output1[215]=0;
  p_output1[216]=0;
  p_output1[217]=0;
  p_output1[218]=0;
  p_output1[219]=0;
  p_output1[220]=0;
  p_output1[221]=0;
  p_output1[222]=0;
  p_output1[223]=0;
  p_output1[224]=0;
  p_output1[225]=0;
  p_output1[226]=0;
  p_output1[227]=0;
  p_output1[228]=0;
  p_output1[229]=0;
  p_output1[230]=0;
  p_output1[231]=0;
  p_output1[232]=0;
  p_output1[233]=0;
  p_output1[234]=0;
  p_output1[235]=0;
  p_output1[236]=0;
  p_output1[237]=0;
  p_output1[238]=0;
  p_output1[239]=0;
  p_output1[240]=0;
  p_output1[241]=0;
  p_output1[242]=0;
  p_output1[243]=0;
  p_output1[244]=0;
  p_output1[245]=0;
  p_output1[246]=0;
  p_output1[247]=0;
  p_output1[248]=0;
  p_output1[249]=0;
  p_output1[250]=0;
  p_output1[251]=0;
  p_output1[252]=0;
  p_output1[253]=0;
  p_output1[254]=0;
  p_output1[255]=0;
  p_output1[256]=0;
  p_output1[257]=0;
  p_output1[258]=0;
  p_output1[259]=0;
  p_output1[260]=0;
  p_output1[261]=0;
  p_output1[262]=0;
  p_output1[263]=0;
  p_output1[264]=0;
  p_output1[265]=0;
  p_output1[266]=0;
  p_output1[267]=0;
  p_output1[268]=0;
  p_output1[269]=0;
  p_output1[270]=t984;
  p_output1[271]=t1017;
  p_output1[272]=t1043;
  p_output1[273]=t1119 + t1120 + t1121 + t1060*t567 + t1050*t593;
  p_output1[274]=t1150 + t1151 + t1152 + t1082*t567 + t1077*t593;
  p_output1[275]=t1178 + t1179 + t1180 + t1101*t567 + t1096*t593;
  p_output1[276]=0;
  p_output1[277]=0;
  p_output1[278]=0;
  p_output1[279]=0;
  p_output1[280]=0;
  p_output1[281]=0;
  p_output1[282]=0;
  p_output1[283]=0;
  p_output1[284]=0;
  p_output1[285]=t1117*t567 + 0.04269174853215001*Power(t567,2) + t1113*t593 + 0.04269174853215001*Power(t593,2) + 4.566*Power(t980,2);
  p_output1[286]=t1205;
  p_output1[287]=0;
  p_output1[288]=t987;
  p_output1[289]=t1020;
  p_output1[290]=t1046;
  p_output1[291]=t1125;
  p_output1[292]=t1156;
  p_output1[293]=t1184;
  p_output1[294]=0;
  p_output1[295]=0;
  p_output1[296]=0;
  p_output1[297]=0;
  p_output1[298]=0;
  p_output1[299]=0;
  p_output1[300]=0;
  p_output1[301]=0;
  p_output1[302]=0;
  p_output1[303]=t1205;
  p_output1[304]=0.05955944429566;
  p_output1[305]=0;
  p_output1[306]=0;
  p_output1[307]=0;
  p_output1[308]=0;
  p_output1[309]=0;
  p_output1[310]=0;
  p_output1[311]=0;
  p_output1[312]=0;
  p_output1[313]=0;
  p_output1[314]=0;
  p_output1[315]=0;
  p_output1[316]=0;
  p_output1[317]=0;
  p_output1[318]=0;
  p_output1[319]=0;
  p_output1[320]=0;
  p_output1[321]=0;
  p_output1[322]=0;
  p_output1[323]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 18, (mwSize) 18, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "Mmat12_b1_description.hh"

namespace SymFunction
{

void Mmat12_b1_description_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
