/*
 * Automatically Generated from Mathematica.
 * Sun 22 Sep 2024 09:05:52 GMT-05:00
 */

#include "math2mat.hpp"
#include "mdefs.hpp"

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t150;
  double t138;
  double t169;
  double t218;
  double t214;
  double t216;
  double t219;
  double t90;
  double t217;
  double t221;
  double t226;
  double t174;
  double t241;
  double t257;
  double t266;
  double t235;
  double t139;
  double t186;
  double t194;
  double t227;
  double t268;
  double t297;
  double t299;
  double t300;
  double t301;
  double t340;
  double t344;
  double t319;
  double t320;
  double t321;
  double t324;
  double t325;
  double t326;
  double t327;
  double t334;
  double t335;
  double t349;
  double t350;
  double t352;
  double t368;
  double t372;
  double t376;
  double t382;
  double t386;
  double t388;
  double t403;
  double t404;
  double t405;
  double t407;
  double t408;
  double t409;
  double t447;
  double t448;
  double t449;
  double t450;
  double t451;
  double t452;
  double t454;
  double t456;
  double t457;
  double t458;
  double t446;
  double t453;
  double t460;
  double t465;
  double t472;
  double t475;
  double t476;
  double t477;
  double t478;
  double t479;
  double t441;
  double t442;
  double t443;
  double t445;
  double t466;
  double t467;
  double t483;
  double t484;
  double t485;
  double t490;
  double t491;
  double t500;
  double t471;
  double t480;
  double t481;
  double t489;
  double t504;
  double t505;
  double t509;
  double t510;
  double t513;
  double t482;
  double t518;
  double t527;
  double t532;
  double t539;
  double t547;
  double t569;
  double t565;
  double t575;
  double t579;
  double t555;
  double t559;
  double t586;
  double t591;
  double t341;
  double t353;
  double t362;
  double t366;
  double t381;
  double t392;
  double t395;
  double t402;
  double t406;
  double t410;
  double t411;
  double t412;
  double t413;
  double t415;
  double t416;
  double t421;
  double t426;
  double t427;
  double t433;
  double t435;
  double t437;
  double t438;
  double t506;
  double t514;
  double t516;
  double t517;
  double t519;
  double t521;
  double t522;
  double t524;
  double t525;
  double t528;
  double t529;
  double t530;
  double t531;
  double t533;
  double t534;
  double t535;
  double t536;
  double t537;
  double t540;
  double t544;
  double t545;
  double t546;
  double t548;
  double t549;
  double t550;
  double t551;
  double t552;
  double t556;
  double t557;
  double t558;
  double t560;
  double t561;
  double t562;
  double t563;
  double t566;
  double t567;
  double t568;
  double t570;
  double t571;
  double t572;
  double t573;
  double t576;
  double t577;
  double t578;
  double t580;
  double t581;
  double t582;
  double t583;
  double t587;
  double t588;
  double t589;
  double t590;
  double t592;
  double t593;
  double t594;
  double t597;
  double t598;
  double t599;
  double t600;
  double t602;
  double t603;
  double t604;
  double t605;
  double t608;
  double t609;
  double t610;
  double t611;
  double t612;
  double t613;
  double t614;
  double t615;
  double t619;
  double t620;
  double t621;
  double t622;
  double t624;
  double t625;
  double t626;
  double t629;
  double t630;
  double t631;
  double t635;
  double t636;
  double t637;
  double t638;
  double t640;
  double t641;
  double t642;
  double t643;
  double t425;
  double t434;
  double t439;
  double t440;
  double t662;
  double t664;
  double t665;
  double t666;
  double t526;
  double t538;
  double t553;
  double t554;
  double t667;
  double t668;
  double t669;
  double t670;
  double t699;
  double t700;
  double t701;
  double t702;
  double t199;
  double t778;
  double t564;
  double t574;
  double t584;
  double t585;
  double t671;
  double t672;
  double t673;
  double t674;
  double t703;
  double t704;
  double t705;
  double t706;
  double t740;
  double t722;
  double t723;
  double t727;
  double t729;
  double t730;
  double t731;
  double t749;
  double t750;
  double t751;
  double t745;
  double t746;
  double t747;
  double t741;
  double t742;
  double t743;
  double t758;
  double t759;
  double t760;
  double t754;
  double t755;
  double t756;
  double t770;
  double t771;
  double t772;
  double t766;
  double t767;
  double t768;
  double t813;
  double t595;
  double t607;
  double t616;
  double t617;
  double t675;
  double t676;
  double t677;
  double t678;
  double t707;
  double t708;
  double t709;
  double t710;
  double t753;
  double t762;
  double t763;
  double t764;
  double t800;
  double t803;
  double t804;
  double t805;
  double t843;
  double t627;
  double t632;
  double t633;
  double t634;
  double t679;
  double t680;
  double t681;
  double t682;
  double t711;
  double t712;
  double t713;
  double t714;
  double t774;
  double t775;
  double t776;
  double t809;
  double t810;
  double t811;
  double t839;
  double t840;
  double t841;
  double t639;
  double t644;
  double t645;
  double t683;
  double t684;
  double t685;
  double t715;
  double t716;
  double t717;
  double t779;
  double t780;
  double t781;
  double t814;
  double t815;
  double t816;
  double t844;
  double t845;
  double t846;
  double t868;
  double t869;
  double t870;
  double t646;
  double t648;
  double t652;
  double t686;
  double t687;
  double t688;
  double t718;
  double t719;
  double t720;
  double t782;
  double t783;
  double t784;
  double t817;
  double t818;
  double t819;
  double t847;
  double t848;
  double t849;
  double t871;
  double t872;
  double t873;
  double t879;
  double t880;
  double t881;
  t150 = Cos(var1[9]);
  t138 = Sin(var1[4]);
  t169 = Cos(var1[4]);
  t218 = Cos(var1[10]);
  t214 = Cos(var1[11]);
  t216 = Sin(var1[10]);
  t219 = Sin(var1[11]);
  t90 = Sin(var1[9]);
  t217 = -1.*t214*t216;
  t221 = -1.*t218*t219;
  t226 = t217 + t221;
  t174 = Sin(var1[5]);
  t241 = t218*t214;
  t257 = -1.*t216*t219;
  t266 = t241 + t257;
  t235 = Cos(var1[5]);
  t139 = t90*t138;
  t186 = -1.*t150*t169*t174;
  t194 = t139 + t186;
  t227 = t150*t226*t138;
  t268 = t235*t266;
  t297 = t90*t226*t174;
  t299 = t268 + t297;
  t300 = t169*t299;
  t301 = t227 + t300;
  t340 = Cos(var1[3]);
  t344 = Sin(var1[3]);
  t319 = t150*t266*t138;
  t320 = t214*t216;
  t321 = t218*t219;
  t324 = t320 + t321;
  t325 = t235*t324;
  t326 = t90*t266*t174;
  t327 = t325 + t326;
  t334 = t169*t327;
  t335 = t319 + t334;
  t349 = t169*t90;
  t350 = t150*t138*t174;
  t352 = t349 + t350;
  t368 = -1.*t235*t90*t226;
  t372 = t266*t174;
  t376 = t368 + t372;
  t382 = t150*t169*t226;
  t386 = -1.*t138*t299;
  t388 = t382 + t386;
  t403 = -1.*t235*t90*t266;
  t404 = t324*t174;
  t405 = t403 + t404;
  t407 = t150*t169*t266;
  t408 = -1.*t138*t327;
  t409 = t407 + t408;
  t447 = -1.*t214;
  t448 = 1. + t447;
  t449 = 0.3455*t448;
  t450 = 0.350499*t214;
  t451 = -0.20949600000000002*t219;
  t452 = t449 + t450 + t451;
  t454 = -0.35*t448;
  t456 = -0.559496*t214;
  t457 = -0.004999000000000031*t219;
  t458 = t454 + t456 + t457;
  t446 = 0.3455*t216;
  t453 = -1.*t216*t452;
  t460 = t218*t458;
  t465 = t446 + t453 + t460;
  t472 = -1.*t218;
  t475 = 1. + t472;
  t476 = 0.3455*t475;
  t477 = t218*t452;
  t478 = t216*t458;
  t479 = t476 + t477 + t478;
  t441 = -1.*t150;
  t442 = 1. + t441;
  t443 = 0.072*t442;
  t445 = 0.19875*t150;
  t466 = -1.*t90*t465;
  t467 = t443 + t445 + t466;
  t483 = 0.12675000000000003*t90;
  t484 = t150*t465;
  t485 = t483 + t484;
  t490 = t235*t479;
  t491 = -1.*t467*t174;
  t500 = t490 + t491;
  t471 = t235*t467;
  t480 = t479*t174;
  t481 = t471 + t480;
  t489 = t485*t138;
  t504 = t169*t500;
  t505 = t489 + t504;
  t509 = t169*t485;
  t510 = -1.*t138*t500;
  t513 = t509 + t510;
  t482 = t150*t235*t481;
  t518 = -1.*t481*t376;
  t527 = t481*t376;
  t532 = -1.*t481*t405;
  t539 = -1.*t150*t235*t481;
  t547 = t481*t405;
  t569 = -1.*t150*t485*t266;
  t565 = t150*t485*t226;
  t575 = -1.*t90*t485;
  t579 = t150*t485*t266;
  t555 = t90*t485;
  t559 = -1.*t150*t485*t226;
  t586 = -1.*t479*t324;
  t591 = t479*t266;
  t341 = t150*t340*t235;
  t353 = -1.*t344*t352;
  t362 = t341 + t353;
  t366 = 1.1*t194*t362;
  t381 = t340*t376;
  t392 = -1.*t344*t388;
  t395 = t381 + t392;
  t402 = 1.1*t301*t395;
  t406 = t340*t405;
  t410 = -1.*t344*t409;
  t411 = t406 + t410;
  t412 = 1.1*t335*t411;
  t413 = t366 + t402 + t412;
  t415 = t150*t235*t344;
  t416 = t340*t352;
  t421 = t415 + t416;
  t426 = t344*t376;
  t427 = t340*t388;
  t433 = t426 + t427;
  t435 = t344*t405;
  t437 = t340*t409;
  t438 = t435 + t437;
  t506 = t194*t505;
  t514 = t352*t513;
  t516 = t482 + t506 + t514;
  t517 = t301*t516;
  t519 = -1.*t505*t301;
  t521 = -1.*t513*t388;
  t522 = t518 + t519 + t521;
  t524 = t194*t522;
  t525 = t517 + t524;
  t528 = t505*t301;
  t529 = t513*t388;
  t530 = t527 + t528 + t529;
  t531 = t335*t530;
  t533 = -1.*t505*t335;
  t534 = -1.*t513*t409;
  t535 = t532 + t533 + t534;
  t536 = t301*t535;
  t537 = t531 + t536;
  t540 = -1.*t194*t505;
  t544 = -1.*t352*t513;
  t545 = t539 + t540 + t544;
  t546 = t335*t545;
  t548 = t505*t335;
  t549 = t513*t409;
  t550 = t547 + t548 + t549;
  t551 = t194*t550;
  t552 = t546 + t551;
  t556 = -1.*t150*t174*t500;
  t557 = t555 + t556 + t482;
  t558 = t376*t557;
  t560 = -1.*t500*t299;
  t561 = t559 + t560 + t518;
  t562 = t150*t235*t561;
  t563 = t558 + t562;
  t566 = t500*t299;
  t567 = t565 + t566 + t527;
  t568 = t405*t567;
  t570 = -1.*t500*t327;
  t571 = t569 + t532 + t570;
  t572 = t376*t571;
  t573 = t568 + t572;
  t576 = t150*t174*t500;
  t577 = t575 + t576 + t539;
  t578 = t405*t577;
  t580 = t500*t327;
  t581 = t579 + t547 + t580;
  t582 = t150*t235*t581;
  t583 = t578 + t582;
  t587 = t90*t467*t266;
  t588 = t586 + t569 + t587;
  t589 = t150*t226*t588;
  t590 = -1.*t90*t467*t226;
  t592 = t565 + t590 + t591;
  t593 = t150*t266*t592;
  t594 = t589 + t593;
  t597 = -1.*t150*t467;
  t598 = t575 + t597;
  t599 = t150*t598*t266;
  t600 = t479*t324;
  t602 = -1.*t90*t467*t266;
  t603 = t600 + t579 + t602;
  t604 = t90*t603;
  t605 = t599 + t604;
  t608 = t150*t467;
  t609 = t555 + t608;
  t610 = t150*t609*t226;
  t611 = t90*t467*t226;
  t612 = -1.*t479*t266;
  t613 = t559 + t611 + t612;
  t614 = t90*t613;
  t615 = t610 + t614;
  t619 = -1.*t465*t266;
  t620 = t586 + t619;
  t621 = t266*t620;
  t622 = t465*t226;
  t624 = t622 + t591;
  t625 = t324*t624;
  t626 = t621 + t625;
  t629 = -0.072*t226;
  t630 = -0.19875*t324;
  t631 = t629 + t630;
  t635 = t214*t458;
  t636 = -0.3455*t219;
  t637 = t452*t219;
  t638 = t635 + t636 + t637;
  t640 = 0.3455*t214;
  t641 = -1.*t214*t452;
  t642 = t458*t219;
  t643 = t640 + t641 + t642;
  t425 = 1.1*t194*t421;
  t434 = 1.1*t301*t433;
  t439 = 1.1*t335*t438;
  t440 = t425 + t434 + t439;
  t662 = 1.1*t421*t362;
  t664 = 1.1*t433*t395;
  t665 = 1.1*t438*t411;
  t666 = t662 + t664 + t665;
  t526 = 1.1*t335*t525;
  t538 = 1.1*t194*t537;
  t553 = 1.1*t301*t552;
  t554 = t526 + t538 + t553;
  t667 = 1.1*t411*t525;
  t668 = 1.1*t362*t537;
  t669 = 1.1*t395*t552;
  t670 = t667 + t668 + t669;
  t699 = 1.1*t438*t525;
  t700 = 1.1*t421*t537;
  t701 = 1.1*t433*t552;
  t702 = t699 + t700 + t701;
  t199 = Power(t194,2);
  t778 = 0.016226*t194;
  t564 = 1.1*t335*t563;
  t574 = 1.1*t194*t573;
  t584 = 1.1*t301*t583;
  t585 = t564 + t574 + t584;
  t671 = 1.1*t563*t411;
  t672 = 1.1*t362*t573;
  t673 = 1.1*t395*t583;
  t674 = t671 + t672 + t673;
  t703 = 1.1*t563*t438;
  t704 = 1.1*t421*t573;
  t705 = 1.1*t433*t583;
  t706 = t703 + t704 + t705;
  t740 = 0.016226*t150*t235*t194;
  t722 = 0.016077*t301;
  t723 = 0.000213*t335;
  t727 = t722 + t723;
  t729 = 0.000213*t301;
  t730 = 0.000409*t335;
  t731 = t729 + t730;
  t749 = 1.1*t563*t525;
  t750 = 1.1*t573*t537;
  t751 = 1.1*t583*t552;
  t745 = 0.000409*t405;
  t746 = 0.000213*t376;
  t747 = t745 + t746;
  t741 = 0.000213*t405;
  t742 = 0.016077*t376;
  t743 = t741 + t742;
  t758 = 0.000213*t150*t226;
  t759 = 0.000409*t150*t266;
  t760 = t758 + t759;
  t754 = 0.016077*t150*t226;
  t755 = 0.000213*t150*t266;
  t756 = t754 + t755;
  t770 = 0.000409*t324;
  t771 = 0.000213*t266;
  t772 = t770 + t771;
  t766 = 0.000213*t324;
  t767 = 0.016077*t266;
  t768 = t766 + t767;
  t813 = 0.016226*t150*t235;
  t595 = 1.1*t594*t194;
  t607 = 1.1*t605*t301;
  t616 = 1.1*t615*t335;
  t617 = t595 + t607 + t616;
  t675 = 1.1*t594*t362;
  t676 = 1.1*t605*t395;
  t677 = 1.1*t615*t411;
  t678 = t675 + t676 + t677;
  t707 = 1.1*t594*t421;
  t708 = 1.1*t605*t433;
  t709 = 1.1*t615*t438;
  t710 = t707 + t708 + t709;
  t753 = 0.016226*t90*t194;
  t762 = 1.1*t615*t525;
  t763 = 1.1*t594*t537;
  t764 = 1.1*t605*t552;
  t800 = 0.016226*t150*t235*t90;
  t803 = 1.1*t615*t563;
  t804 = 1.1*t594*t573;
  t805 = 1.1*t605*t583;
  t843 = 0.016226*t90;
  t627 = 1.1*t626*t194;
  t632 = 1.1*t631*t301;
  t633 = 0.13942500000000005*t266*t335;
  t634 = t627 + t632 + t633;
  t679 = 1.1*t626*t362;
  t680 = 1.1*t631*t395;
  t681 = 0.13942500000000005*t266*t411;
  t682 = t679 + t680 + t681;
  t711 = 1.1*t626*t421;
  t712 = 1.1*t631*t433;
  t713 = 0.13942500000000005*t266*t438;
  t714 = t711 + t712 + t713;
  t774 = 0.13942500000000005*t266*t525;
  t775 = 1.1*t626*t537;
  t776 = 1.1*t631*t552;
  t809 = 0.13942500000000005*t266*t563;
  t810 = 1.1*t626*t573;
  t811 = 1.1*t631*t583;
  t839 = 1.1*t631*t605;
  t840 = 0.13942500000000005*t266*t615;
  t841 = 1.1*t594*t626;
  t639 = 1.1*t638*t301;
  t644 = 1.1*t643*t335;
  t645 = t639 + t644;
  t683 = 1.1*t638*t395;
  t684 = 1.1*t643*t411;
  t685 = t683 + t684;
  t715 = 1.1*t638*t433;
  t716 = 1.1*t643*t438;
  t717 = t715 + t716;
  t779 = 1.1*t643*t525;
  t780 = 1.1*t638*t552;
  t781 = t778 + t779 + t780;
  t814 = 1.1*t643*t563;
  t815 = 1.1*t638*t583;
  t816 = t813 + t814 + t815;
  t844 = 1.1*t638*t605;
  t845 = 1.1*t643*t615;
  t846 = t843 + t844 + t845;
  t868 = 0.13942500000000005*t266*t643;
  t869 = 1.1*t638*t631;
  t870 = t868 + t869;
  t646 = -0.23044560000000003*t301;
  t648 = -0.005498900000000035*t335;
  t652 = t646 + t648;
  t686 = -0.23044560000000003*t395;
  t687 = -0.005498900000000035*t411;
  t688 = t686 + t687;
  t718 = -0.23044560000000003*t433;
  t719 = -0.005498900000000035*t438;
  t720 = t718 + t719;
  t782 = -0.005498900000000035*t525;
  t783 = -0.23044560000000003*t552;
  t784 = t778 + t782 + t783;
  t817 = -0.005498900000000035*t563;
  t818 = -0.23044560000000003*t583;
  t819 = t813 + t817 + t818;
  t847 = -0.23044560000000003*t605;
  t848 = -0.005498900000000035*t615;
  t849 = t843 + t847 + t848;
  t871 = -0.0006969855750000045*t266;
  t872 = -0.23044560000000003*t631;
  t873 = t871 + t872;
  t879 = -0.23044560000000003*t638;
  t880 = -0.005498900000000035*t643;
  t881 = 0.016226 + t879 + t880;
  p_output1[0]=1.1*t199 + 1.1*Power(t301,2) + 1.1*Power(t335,2);
  p_output1[1]=t413;
  p_output1[2]=t440;
  p_output1[3]=t554;
  p_output1[4]=t585;
  p_output1[5]=t617;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=t634;
  p_output1[10]=t645;
  p_output1[11]=t652;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=t413;
  p_output1[19]=1.1*Power(t362,2) + 1.1*Power(t395,2) + 1.1*Power(t411,2);
  p_output1[20]=t666;
  p_output1[21]=t670;
  p_output1[22]=t674;
  p_output1[23]=t678;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=t682;
  p_output1[28]=t685;
  p_output1[29]=t688;
  p_output1[30]=0;
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=0;
  p_output1[36]=t440;
  p_output1[37]=t666;
  p_output1[38]=1.1*Power(t421,2) + 1.1*Power(t433,2) + 1.1*Power(t438,2);
  p_output1[39]=t702;
  p_output1[40]=t706;
  p_output1[41]=t710;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=t714;
  p_output1[46]=t717;
  p_output1[47]=t720;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
  p_output1[54]=t554;
  p_output1[55]=t670;
  p_output1[56]=t702;
  p_output1[57]=0.016226*t199 + 1.1*Power(t525,2) + 1.1*Power(t537,2) + 1.1*Power(t552,2) + t301*t727 + t335*t731;
  p_output1[58]=t740 + t301*t743 + t335*t747 + t749 + t750 + t751;
  p_output1[59]=t753 + t301*t756 + t335*t760 + t762 + t763 + t764;
  p_output1[60]=0;
  p_output1[61]=0;
  p_output1[62]=0;
  p_output1[63]=t301*t768 + t335*t772 + t774 + t775 + t776;
  p_output1[64]=t781;
  p_output1[65]=t784;
  p_output1[66]=0;
  p_output1[67]=0;
  p_output1[68]=0;
  p_output1[69]=0;
  p_output1[70]=0;
  p_output1[71]=0;
  p_output1[72]=t585;
  p_output1[73]=t674;
  p_output1[74]=t706;
  p_output1[75]=t376*t727 + t405*t731 + t740 + t749 + t750 + t751;
  p_output1[76]=0.016226*Power(t150,2)*Power(t235,2) + 1.1*Power(t563,2) + 1.1*Power(t573,2) + 1.1*Power(t583,2) + t376*t743 + t405*t747;
  p_output1[77]=t376*t756 + t405*t760 + t800 + t803 + t804 + t805;
  p_output1[78]=0;
  p_output1[79]=0;
  p_output1[80]=0;
  p_output1[81]=t376*t768 + t405*t772 + t809 + t810 + t811;
  p_output1[82]=t816;
  p_output1[83]=t819;
  p_output1[84]=0;
  p_output1[85]=0;
  p_output1[86]=0;
  p_output1[87]=0;
  p_output1[88]=0;
  p_output1[89]=0;
  p_output1[90]=t617;
  p_output1[91]=t678;
  p_output1[92]=t710;
  p_output1[93]=t150*t226*t727 + t150*t266*t731 + t753 + t762 + t763 + t764;
  p_output1[94]=t150*t226*t743 + t150*t266*t747 + t800 + t803 + t804 + t805;
  p_output1[95]=1.1*Power(t594,2) + 1.1*Power(t605,2) + 1.1*Power(t615,2) + t150*t226*t756 + t150*t266*t760 + 0.016226*Power(t90,2);
  p_output1[96]=0;
  p_output1[97]=0;
  p_output1[98]=0;
  p_output1[99]=t150*t226*t768 + t150*t266*t772 + t839 + t840 + t841;
  p_output1[100]=t846;
  p_output1[101]=t849;
  p_output1[102]=0;
  p_output1[103]=0;
  p_output1[104]=0;
  p_output1[105]=0;
  p_output1[106]=0;
  p_output1[107]=0;
  p_output1[108]=0;
  p_output1[109]=0;
  p_output1[110]=0;
  p_output1[111]=0;
  p_output1[112]=0;
  p_output1[113]=0;
  p_output1[114]=0;
  p_output1[115]=0;
  p_output1[116]=0;
  p_output1[117]=0;
  p_output1[118]=0;
  p_output1[119]=0;
  p_output1[120]=0;
  p_output1[121]=0;
  p_output1[122]=0;
  p_output1[123]=0;
  p_output1[124]=0;
  p_output1[125]=0;
  p_output1[126]=0;
  p_output1[127]=0;
  p_output1[128]=0;
  p_output1[129]=0;
  p_output1[130]=0;
  p_output1[131]=0;
  p_output1[132]=0;
  p_output1[133]=0;
  p_output1[134]=0;
  p_output1[135]=0;
  p_output1[136]=0;
  p_output1[137]=0;
  p_output1[138]=0;
  p_output1[139]=0;
  p_output1[140]=0;
  p_output1[141]=0;
  p_output1[142]=0;
  p_output1[143]=0;
  p_output1[144]=0;
  p_output1[145]=0;
  p_output1[146]=0;
  p_output1[147]=0;
  p_output1[148]=0;
  p_output1[149]=0;
  p_output1[150]=0;
  p_output1[151]=0;
  p_output1[152]=0;
  p_output1[153]=0;
  p_output1[154]=0;
  p_output1[155]=0;
  p_output1[156]=0;
  p_output1[157]=0;
  p_output1[158]=0;
  p_output1[159]=0;
  p_output1[160]=0;
  p_output1[161]=0;
  p_output1[162]=t634;
  p_output1[163]=t682;
  p_output1[164]=t714;
  p_output1[165]=t266*t727 + t324*t731 + t774 + t775 + t776;
  p_output1[166]=t266*t743 + t324*t747 + t809 + t810 + t811;
  p_output1[167]=t266*t756 + t324*t760 + t839 + t840 + t841;
  p_output1[168]=0;
  p_output1[169]=0;
  p_output1[170]=0;
  p_output1[171]=0.01767211875000001*Power(t266,2) + 1.1*Power(t626,2) + 1.1*Power(t631,2) + t266*t768 + t324*t772;
  p_output1[172]=t870;
  p_output1[173]=t873;
  p_output1[174]=0;
  p_output1[175]=0;
  p_output1[176]=0;
  p_output1[177]=0;
  p_output1[178]=0;
  p_output1[179]=0;
  p_output1[180]=t645;
  p_output1[181]=t685;
  p_output1[182]=t717;
  p_output1[183]=t781;
  p_output1[184]=t816;
  p_output1[185]=t846;
  p_output1[186]=0;
  p_output1[187]=0;
  p_output1[188]=0;
  p_output1[189]=t870;
  p_output1[190]=0.016226 + 1.1*Power(t638,2) + 1.1*Power(t643,2);
  p_output1[191]=t881;
  p_output1[192]=0;
  p_output1[193]=0;
  p_output1[194]=0;
  p_output1[195]=0;
  p_output1[196]=0;
  p_output1[197]=0;
  p_output1[198]=t652;
  p_output1[199]=t688;
  p_output1[200]=t720;
  p_output1[201]=t784;
  p_output1[202]=t819;
  p_output1[203]=t849;
  p_output1[204]=0;
  p_output1[205]=0;
  p_output1[206]=0;
  p_output1[207]=t873;
  p_output1[208]=t881;
  p_output1[209]=0.06453092041870001;
  p_output1[210]=0;
  p_output1[211]=0;
  p_output1[212]=0;
  p_output1[213]=0;
  p_output1[214]=0;
  p_output1[215]=0;
  p_output1[216]=0;
  p_output1[217]=0;
  p_output1[218]=0;
  p_output1[219]=0;
  p_output1[220]=0;
  p_output1[221]=0;
  p_output1[222]=0;
  p_output1[223]=0;
  p_output1[224]=0;
  p_output1[225]=0;
  p_output1[226]=0;
  p_output1[227]=0;
  p_output1[228]=0;
  p_output1[229]=0;
  p_output1[230]=0;
  p_output1[231]=0;
  p_output1[232]=0;
  p_output1[233]=0;
  p_output1[234]=0;
  p_output1[235]=0;
  p_output1[236]=0;
  p_output1[237]=0;
  p_output1[238]=0;
  p_output1[239]=0;
  p_output1[240]=0;
  p_output1[241]=0;
  p_output1[242]=0;
  p_output1[243]=0;
  p_output1[244]=0;
  p_output1[245]=0;
  p_output1[246]=0;
  p_output1[247]=0;
  p_output1[248]=0;
  p_output1[249]=0;
  p_output1[250]=0;
  p_output1[251]=0;
  p_output1[252]=0;
  p_output1[253]=0;
  p_output1[254]=0;
  p_output1[255]=0;
  p_output1[256]=0;
  p_output1[257]=0;
  p_output1[258]=0;
  p_output1[259]=0;
  p_output1[260]=0;
  p_output1[261]=0;
  p_output1[262]=0;
  p_output1[263]=0;
  p_output1[264]=0;
  p_output1[265]=0;
  p_output1[266]=0;
  p_output1[267]=0;
  p_output1[268]=0;
  p_output1[269]=0;
  p_output1[270]=0;
  p_output1[271]=0;
  p_output1[272]=0;
  p_output1[273]=0;
  p_output1[274]=0;
  p_output1[275]=0;
  p_output1[276]=0;
  p_output1[277]=0;
  p_output1[278]=0;
  p_output1[279]=0;
  p_output1[280]=0;
  p_output1[281]=0;
  p_output1[282]=0;
  p_output1[283]=0;
  p_output1[284]=0;
  p_output1[285]=0;
  p_output1[286]=0;
  p_output1[287]=0;
  p_output1[288]=0;
  p_output1[289]=0;
  p_output1[290]=0;
  p_output1[291]=0;
  p_output1[292]=0;
  p_output1[293]=0;
  p_output1[294]=0;
  p_output1[295]=0;
  p_output1[296]=0;
  p_output1[297]=0;
  p_output1[298]=0;
  p_output1[299]=0;
  p_output1[300]=0;
  p_output1[301]=0;
  p_output1[302]=0;
  p_output1[303]=0;
  p_output1[304]=0;
  p_output1[305]=0;
  p_output1[306]=0;
  p_output1[307]=0;
  p_output1[308]=0;
  p_output1[309]=0;
  p_output1[310]=0;
  p_output1[311]=0;
  p_output1[312]=0;
  p_output1[313]=0;
  p_output1[314]=0;
  p_output1[315]=0;
  p_output1[316]=0;
  p_output1[317]=0;
  p_output1[318]=0;
  p_output1[319]=0;
  p_output1[320]=0;
  p_output1[321]=0;
  p_output1[322]=0;
  p_output1[323]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 18, (mwSize) 18, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "Mmat7_b1_description.hh"

namespace SymFunction
{

void Mmat7_b1_description_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
