/*
 * Automatically Generated from Mathematica.
 * Sun 22 Sep 2024 09:05:54 GMT-05:00
 */

#include "math2mat.hpp"
#include "mdefs.hpp"

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t349;
  double t338;
  double t372;
  double t439;
  double t434;
  double t437;
  double t440;
  double t241;
  double t438;
  double t445;
  double t449;
  double t381;
  double t471;
  double t480;
  double t484;
  double t458;
  double t339;
  double t395;
  double t407;
  double t450;
  double t489;
  double t525;
  double t526;
  double t527;
  double t528;
  double t567;
  double t571;
  double t546;
  double t547;
  double t548;
  double t551;
  double t552;
  double t553;
  double t554;
  double t561;
  double t562;
  double t576;
  double t577;
  double t579;
  double t595;
  double t600;
  double t604;
  double t609;
  double t613;
  double t615;
  double t630;
  double t631;
  double t632;
  double t634;
  double t635;
  double t636;
  double t674;
  double t675;
  double t676;
  double t677;
  double t678;
  double t679;
  double t681;
  double t683;
  double t684;
  double t685;
  double t673;
  double t680;
  double t687;
  double t692;
  double t699;
  double t702;
  double t703;
  double t704;
  double t705;
  double t706;
  double t668;
  double t669;
  double t670;
  double t672;
  double t693;
  double t694;
  double t710;
  double t711;
  double t712;
  double t717;
  double t718;
  double t727;
  double t698;
  double t707;
  double t708;
  double t716;
  double t731;
  double t732;
  double t736;
  double t737;
  double t740;
  double t709;
  double t745;
  double t754;
  double t759;
  double t766;
  double t774;
  double t796;
  double t792;
  double t802;
  double t806;
  double t782;
  double t786;
  double t813;
  double t818;
  double t568;
  double t580;
  double t589;
  double t593;
  double t608;
  double t620;
  double t624;
  double t629;
  double t633;
  double t637;
  double t638;
  double t639;
  double t640;
  double t642;
  double t643;
  double t648;
  double t653;
  double t654;
  double t660;
  double t662;
  double t664;
  double t665;
  double t733;
  double t741;
  double t743;
  double t744;
  double t746;
  double t748;
  double t749;
  double t751;
  double t752;
  double t755;
  double t756;
  double t757;
  double t758;
  double t760;
  double t761;
  double t762;
  double t763;
  double t764;
  double t767;
  double t771;
  double t772;
  double t773;
  double t775;
  double t776;
  double t777;
  double t778;
  double t779;
  double t783;
  double t784;
  double t785;
  double t787;
  double t788;
  double t789;
  double t790;
  double t793;
  double t794;
  double t795;
  double t797;
  double t798;
  double t799;
  double t800;
  double t803;
  double t804;
  double t805;
  double t807;
  double t808;
  double t809;
  double t810;
  double t814;
  double t815;
  double t816;
  double t817;
  double t819;
  double t820;
  double t821;
  double t824;
  double t825;
  double t826;
  double t827;
  double t829;
  double t830;
  double t831;
  double t832;
  double t835;
  double t836;
  double t837;
  double t838;
  double t839;
  double t840;
  double t841;
  double t842;
  double t846;
  double t847;
  double t848;
  double t849;
  double t851;
  double t852;
  double t853;
  double t856;
  double t857;
  double t858;
  double t862;
  double t863;
  double t864;
  double t865;
  double t867;
  double t868;
  double t869;
  double t870;
  double t652;
  double t661;
  double t666;
  double t667;
  double t889;
  double t891;
  double t892;
  double t893;
  double t753;
  double t765;
  double t780;
  double t781;
  double t894;
  double t895;
  double t896;
  double t897;
  double t926;
  double t927;
  double t928;
  double t929;
  double t412;
  double t1005;
  double t791;
  double t801;
  double t811;
  double t812;
  double t898;
  double t899;
  double t900;
  double t901;
  double t930;
  double t931;
  double t932;
  double t933;
  double t967;
  double t949;
  double t950;
  double t954;
  double t956;
  double t957;
  double t958;
  double t976;
  double t977;
  double t978;
  double t972;
  double t973;
  double t974;
  double t968;
  double t969;
  double t970;
  double t985;
  double t986;
  double t987;
  double t981;
  double t982;
  double t983;
  double t997;
  double t998;
  double t999;
  double t993;
  double t994;
  double t995;
  double t1040;
  double t822;
  double t834;
  double t843;
  double t844;
  double t902;
  double t903;
  double t904;
  double t905;
  double t934;
  double t935;
  double t936;
  double t937;
  double t980;
  double t989;
  double t990;
  double t991;
  double t1027;
  double t1030;
  double t1031;
  double t1032;
  double t1070;
  double t854;
  double t859;
  double t860;
  double t861;
  double t906;
  double t907;
  double t908;
  double t909;
  double t938;
  double t939;
  double t940;
  double t941;
  double t1001;
  double t1002;
  double t1003;
  double t1036;
  double t1037;
  double t1038;
  double t1066;
  double t1067;
  double t1068;
  double t866;
  double t871;
  double t872;
  double t910;
  double t911;
  double t912;
  double t942;
  double t943;
  double t944;
  double t1006;
  double t1007;
  double t1008;
  double t1041;
  double t1042;
  double t1043;
  double t1071;
  double t1072;
  double t1073;
  double t1095;
  double t1096;
  double t1097;
  double t873;
  double t875;
  double t879;
  double t913;
  double t914;
  double t915;
  double t945;
  double t946;
  double t947;
  double t1009;
  double t1010;
  double t1011;
  double t1044;
  double t1045;
  double t1046;
  double t1074;
  double t1075;
  double t1076;
  double t1098;
  double t1099;
  double t1100;
  double t1106;
  double t1107;
  double t1108;
  t349 = Cos(var1[12]);
  t338 = Sin(var1[4]);
  t372 = Cos(var1[4]);
  t439 = Cos(var1[13]);
  t434 = Cos(var1[14]);
  t437 = Sin(var1[13]);
  t440 = Sin(var1[14]);
  t241 = Sin(var1[12]);
  t438 = -1.*t434*t437;
  t445 = -1.*t439*t440;
  t449 = t438 + t445;
  t381 = Sin(var1[5]);
  t471 = t439*t434;
  t480 = -1.*t437*t440;
  t484 = t471 + t480;
  t458 = Cos(var1[5]);
  t339 = t241*t338;
  t395 = -1.*t349*t372*t381;
  t407 = t339 + t395;
  t450 = t349*t449*t338;
  t489 = t458*t484;
  t525 = t241*t449*t381;
  t526 = t489 + t525;
  t527 = t372*t526;
  t528 = t450 + t527;
  t567 = Cos(var1[3]);
  t571 = Sin(var1[3]);
  t546 = t349*t484*t338;
  t547 = t434*t437;
  t548 = t439*t440;
  t551 = t547 + t548;
  t552 = t458*t551;
  t553 = t241*t484*t381;
  t554 = t552 + t553;
  t561 = t372*t554;
  t562 = t546 + t561;
  t576 = t372*t241;
  t577 = t349*t338*t381;
  t579 = t576 + t577;
  t595 = -1.*t458*t241*t449;
  t600 = t484*t381;
  t604 = t595 + t600;
  t609 = t349*t372*t449;
  t613 = -1.*t338*t526;
  t615 = t609 + t613;
  t630 = -1.*t458*t241*t484;
  t631 = t551*t381;
  t632 = t630 + t631;
  t634 = t349*t372*t484;
  t635 = -1.*t338*t554;
  t636 = t634 + t635;
  t674 = -1.*t434;
  t675 = 1. + t674;
  t676 = -0.3455*t675;
  t677 = -0.340501*t434;
  t678 = -0.20949600000000002*t440;
  t679 = t676 + t677 + t678;
  t681 = -0.35*t675;
  t683 = -0.559496*t434;
  t684 = -0.004998999999999976*t440;
  t685 = t681 + t683 + t684;
  t673 = -0.3455*t437;
  t680 = -1.*t437*t679;
  t687 = t439*t685;
  t692 = t673 + t680 + t687;
  t699 = -1.*t439;
  t702 = 1. + t699;
  t703 = -0.3455*t702;
  t704 = t439*t679;
  t705 = t437*t685;
  t706 = t703 + t704 + t705;
  t668 = -1.*t349;
  t669 = 1. + t668;
  t670 = -0.072*t669;
  t672 = -0.19875*t349;
  t693 = -1.*t241*t692;
  t694 = t670 + t672 + t693;
  t710 = -0.12675000000000003*t241;
  t711 = t349*t692;
  t712 = t710 + t711;
  t717 = t458*t706;
  t718 = -1.*t694*t381;
  t727 = t717 + t718;
  t698 = t458*t694;
  t707 = t706*t381;
  t708 = t698 + t707;
  t716 = t712*t338;
  t731 = t372*t727;
  t732 = t716 + t731;
  t736 = t372*t712;
  t737 = -1.*t338*t727;
  t740 = t736 + t737;
  t709 = t349*t458*t708;
  t745 = -1.*t708*t604;
  t754 = t708*t604;
  t759 = -1.*t708*t632;
  t766 = -1.*t349*t458*t708;
  t774 = t708*t632;
  t796 = -1.*t349*t712*t484;
  t792 = t349*t712*t449;
  t802 = -1.*t241*t712;
  t806 = t349*t712*t484;
  t782 = t241*t712;
  t786 = -1.*t349*t712*t449;
  t813 = -1.*t706*t551;
  t818 = t706*t484;
  t568 = t349*t567*t458;
  t580 = -1.*t571*t579;
  t589 = t568 + t580;
  t593 = 1.1*t407*t589;
  t608 = t567*t604;
  t620 = -1.*t571*t615;
  t624 = t608 + t620;
  t629 = 1.1*t528*t624;
  t633 = t567*t632;
  t637 = -1.*t571*t636;
  t638 = t633 + t637;
  t639 = 1.1*t562*t638;
  t640 = t593 + t629 + t639;
  t642 = t349*t458*t571;
  t643 = t567*t579;
  t648 = t642 + t643;
  t653 = t571*t604;
  t654 = t567*t615;
  t660 = t653 + t654;
  t662 = t571*t632;
  t664 = t567*t636;
  t665 = t662 + t664;
  t733 = t407*t732;
  t741 = t579*t740;
  t743 = t709 + t733 + t741;
  t744 = t528*t743;
  t746 = -1.*t732*t528;
  t748 = -1.*t740*t615;
  t749 = t745 + t746 + t748;
  t751 = t407*t749;
  t752 = t744 + t751;
  t755 = t732*t528;
  t756 = t740*t615;
  t757 = t754 + t755 + t756;
  t758 = t562*t757;
  t760 = -1.*t732*t562;
  t761 = -1.*t740*t636;
  t762 = t759 + t760 + t761;
  t763 = t528*t762;
  t764 = t758 + t763;
  t767 = -1.*t407*t732;
  t771 = -1.*t579*t740;
  t772 = t766 + t767 + t771;
  t773 = t562*t772;
  t775 = t732*t562;
  t776 = t740*t636;
  t777 = t774 + t775 + t776;
  t778 = t407*t777;
  t779 = t773 + t778;
  t783 = -1.*t349*t381*t727;
  t784 = t782 + t783 + t709;
  t785 = t604*t784;
  t787 = -1.*t727*t526;
  t788 = t786 + t787 + t745;
  t789 = t349*t458*t788;
  t790 = t785 + t789;
  t793 = t727*t526;
  t794 = t792 + t793 + t754;
  t795 = t632*t794;
  t797 = -1.*t727*t554;
  t798 = t796 + t759 + t797;
  t799 = t604*t798;
  t800 = t795 + t799;
  t803 = t349*t381*t727;
  t804 = t802 + t803 + t766;
  t805 = t632*t804;
  t807 = t727*t554;
  t808 = t806 + t774 + t807;
  t809 = t349*t458*t808;
  t810 = t805 + t809;
  t814 = t241*t694*t484;
  t815 = t813 + t796 + t814;
  t816 = t349*t449*t815;
  t817 = -1.*t241*t694*t449;
  t819 = t792 + t817 + t818;
  t820 = t349*t484*t819;
  t821 = t816 + t820;
  t824 = -1.*t349*t694;
  t825 = t802 + t824;
  t826 = t349*t825*t484;
  t827 = t706*t551;
  t829 = -1.*t241*t694*t484;
  t830 = t827 + t806 + t829;
  t831 = t241*t830;
  t832 = t826 + t831;
  t835 = t349*t694;
  t836 = t782 + t835;
  t837 = t349*t836*t449;
  t838 = t241*t694*t449;
  t839 = -1.*t706*t484;
  t840 = t786 + t838 + t839;
  t841 = t241*t840;
  t842 = t837 + t841;
  t846 = -1.*t692*t484;
  t847 = t813 + t846;
  t848 = t484*t847;
  t849 = t692*t449;
  t851 = t849 + t818;
  t852 = t551*t851;
  t853 = t848 + t852;
  t856 = 0.072*t449;
  t857 = 0.19875*t551;
  t858 = t856 + t857;
  t862 = t434*t685;
  t863 = 0.3455*t440;
  t864 = t679*t440;
  t865 = t862 + t863 + t864;
  t867 = -0.3455*t434;
  t868 = -1.*t434*t679;
  t869 = t685*t440;
  t870 = t867 + t868 + t869;
  t652 = 1.1*t407*t648;
  t661 = 1.1*t528*t660;
  t666 = 1.1*t562*t665;
  t667 = t652 + t661 + t666;
  t889 = 1.1*t648*t589;
  t891 = 1.1*t660*t624;
  t892 = 1.1*t665*t638;
  t893 = t889 + t891 + t892;
  t753 = 1.1*t562*t752;
  t765 = 1.1*t407*t764;
  t780 = 1.1*t528*t779;
  t781 = t753 + t765 + t780;
  t894 = 1.1*t638*t752;
  t895 = 1.1*t589*t764;
  t896 = 1.1*t624*t779;
  t897 = t894 + t895 + t896;
  t926 = 1.1*t665*t752;
  t927 = 1.1*t648*t764;
  t928 = 1.1*t660*t779;
  t929 = t926 + t927 + t928;
  t412 = Power(t407,2);
  t1005 = 0.016226*t407;
  t791 = 1.1*t562*t790;
  t801 = 1.1*t407*t800;
  t811 = 1.1*t528*t810;
  t812 = t791 + t801 + t811;
  t898 = 1.1*t790*t638;
  t899 = 1.1*t589*t800;
  t900 = 1.1*t624*t810;
  t901 = t898 + t899 + t900;
  t930 = 1.1*t790*t665;
  t931 = 1.1*t648*t800;
  t932 = 1.1*t660*t810;
  t933 = t930 + t931 + t932;
  t967 = 0.016226*t349*t458*t407;
  t949 = 0.016077*t528;
  t950 = 0.000213*t562;
  t954 = t949 + t950;
  t956 = 0.000213*t528;
  t957 = 0.000409*t562;
  t958 = t956 + t957;
  t976 = 1.1*t790*t752;
  t977 = 1.1*t800*t764;
  t978 = 1.1*t810*t779;
  t972 = 0.000409*t632;
  t973 = 0.000213*t604;
  t974 = t972 + t973;
  t968 = 0.000213*t632;
  t969 = 0.016077*t604;
  t970 = t968 + t969;
  t985 = 0.000213*t349*t449;
  t986 = 0.000409*t349*t484;
  t987 = t985 + t986;
  t981 = 0.016077*t349*t449;
  t982 = 0.000213*t349*t484;
  t983 = t981 + t982;
  t997 = 0.000409*t551;
  t998 = 0.000213*t484;
  t999 = t997 + t998;
  t993 = 0.000213*t551;
  t994 = 0.016077*t484;
  t995 = t993 + t994;
  t1040 = 0.016226*t349*t458;
  t822 = 1.1*t821*t407;
  t834 = 1.1*t832*t528;
  t843 = 1.1*t842*t562;
  t844 = t822 + t834 + t843;
  t902 = 1.1*t821*t589;
  t903 = 1.1*t832*t624;
  t904 = 1.1*t842*t638;
  t905 = t902 + t903 + t904;
  t934 = 1.1*t821*t648;
  t935 = 1.1*t832*t660;
  t936 = 1.1*t842*t665;
  t937 = t934 + t935 + t936;
  t980 = 0.016226*t241*t407;
  t989 = 1.1*t842*t752;
  t990 = 1.1*t821*t764;
  t991 = 1.1*t832*t779;
  t1027 = 0.016226*t349*t458*t241;
  t1030 = 1.1*t842*t790;
  t1031 = 1.1*t821*t800;
  t1032 = 1.1*t832*t810;
  t1070 = 0.016226*t241;
  t854 = 1.1*t853*t407;
  t859 = 1.1*t858*t528;
  t860 = -0.13942500000000005*t484*t562;
  t861 = t854 + t859 + t860;
  t906 = 1.1*t853*t589;
  t907 = 1.1*t858*t624;
  t908 = -0.13942500000000005*t484*t638;
  t909 = t906 + t907 + t908;
  t938 = 1.1*t853*t648;
  t939 = 1.1*t858*t660;
  t940 = -0.13942500000000005*t484*t665;
  t941 = t938 + t939 + t940;
  t1001 = -0.13942500000000005*t484*t752;
  t1002 = 1.1*t853*t764;
  t1003 = 1.1*t858*t779;
  t1036 = -0.13942500000000005*t484*t790;
  t1037 = 1.1*t853*t800;
  t1038 = 1.1*t858*t810;
  t1066 = 1.1*t858*t832;
  t1067 = -0.13942500000000005*t484*t842;
  t1068 = 1.1*t821*t853;
  t866 = 1.1*t865*t528;
  t871 = 1.1*t870*t562;
  t872 = t866 + t871;
  t910 = 1.1*t865*t624;
  t911 = 1.1*t870*t638;
  t912 = t910 + t911;
  t942 = 1.1*t865*t660;
  t943 = 1.1*t870*t665;
  t944 = t942 + t943;
  t1006 = 1.1*t870*t752;
  t1007 = 1.1*t865*t779;
  t1008 = t1005 + t1006 + t1007;
  t1041 = 1.1*t870*t790;
  t1042 = 1.1*t865*t810;
  t1043 = t1040 + t1041 + t1042;
  t1071 = 1.1*t865*t832;
  t1072 = 1.1*t870*t842;
  t1073 = t1070 + t1071 + t1072;
  t1095 = -0.13942500000000005*t484*t870;
  t1096 = 1.1*t865*t858;
  t1097 = t1095 + t1096;
  t873 = -0.23044560000000003*t528;
  t875 = -0.005498899999999974*t562;
  t879 = t873 + t875;
  t913 = -0.23044560000000003*t624;
  t914 = -0.005498899999999974*t638;
  t915 = t913 + t914;
  t945 = -0.23044560000000003*t660;
  t946 = -0.005498899999999974*t665;
  t947 = t945 + t946;
  t1009 = -0.005498899999999974*t752;
  t1010 = -0.23044560000000003*t779;
  t1011 = t1005 + t1009 + t1010;
  t1044 = -0.005498899999999974*t790;
  t1045 = -0.23044560000000003*t810;
  t1046 = t1040 + t1044 + t1045;
  t1074 = -0.23044560000000003*t832;
  t1075 = -0.005498899999999974*t842;
  t1076 = t1070 + t1074 + t1075;
  t1098 = 0.0006969855749999968*t484;
  t1099 = -0.23044560000000003*t858;
  t1100 = t1098 + t1099;
  t1106 = -0.23044560000000003*t865;
  t1107 = -0.005498899999999974*t870;
  t1108 = 0.016226 + t1106 + t1107;
  p_output1[0]=1.1*t412 + 1.1*Power(t528,2) + 1.1*Power(t562,2);
  p_output1[1]=t640;
  p_output1[2]=t667;
  p_output1[3]=t781;
  p_output1[4]=t812;
  p_output1[5]=t844;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=t861;
  p_output1[13]=t872;
  p_output1[14]=t879;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=t640;
  p_output1[19]=1.1*Power(t589,2) + 1.1*Power(t624,2) + 1.1*Power(t638,2);
  p_output1[20]=t893;
  p_output1[21]=t897;
  p_output1[22]=t901;
  p_output1[23]=t905;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=t909;
  p_output1[31]=t912;
  p_output1[32]=t915;
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=0;
  p_output1[36]=t667;
  p_output1[37]=t893;
  p_output1[38]=1.1*Power(t648,2) + 1.1*Power(t660,2) + 1.1*Power(t665,2);
  p_output1[39]=t929;
  p_output1[40]=t933;
  p_output1[41]=t937;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=t941;
  p_output1[49]=t944;
  p_output1[50]=t947;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
  p_output1[54]=t781;
  p_output1[55]=t897;
  p_output1[56]=t929;
  p_output1[57]=0.016226*t412 + 1.1*Power(t752,2) + 1.1*Power(t764,2) + 1.1*Power(t779,2) + t528*t954 + t562*t958;
  p_output1[58]=t967 + t528*t970 + t562*t974 + t976 + t977 + t978;
  p_output1[59]=t980 + t528*t983 + t562*t987 + t989 + t990 + t991;
  p_output1[60]=0;
  p_output1[61]=0;
  p_output1[62]=0;
  p_output1[63]=0;
  p_output1[64]=0;
  p_output1[65]=0;
  p_output1[66]=t1001 + t1002 + t1003 + t528*t995 + t562*t999;
  p_output1[67]=t1008;
  p_output1[68]=t1011;
  p_output1[69]=0;
  p_output1[70]=0;
  p_output1[71]=0;
  p_output1[72]=t812;
  p_output1[73]=t901;
  p_output1[74]=t933;
  p_output1[75]=t604*t954 + t632*t958 + t967 + t976 + t977 + t978;
  p_output1[76]=0.016226*Power(t349,2)*Power(t458,2) + 1.1*Power(t790,2) + 1.1*Power(t800,2) + 1.1*Power(t810,2) + t604*t970 + t632*t974;
  p_output1[77]=t1027 + t1030 + t1031 + t1032 + t604*t983 + t632*t987;
  p_output1[78]=0;
  p_output1[79]=0;
  p_output1[80]=0;
  p_output1[81]=0;
  p_output1[82]=0;
  p_output1[83]=0;
  p_output1[84]=t1036 + t1037 + t1038 + t604*t995 + t632*t999;
  p_output1[85]=t1043;
  p_output1[86]=t1046;
  p_output1[87]=0;
  p_output1[88]=0;
  p_output1[89]=0;
  p_output1[90]=t844;
  p_output1[91]=t905;
  p_output1[92]=t937;
  p_output1[93]=t349*t449*t954 + t349*t484*t958 + t980 + t989 + t990 + t991;
  p_output1[94]=t1027 + t1030 + t1031 + t1032 + t349*t449*t970 + t349*t484*t974;
  p_output1[95]=0.016226*Power(t241,2) + 1.1*Power(t821,2) + 1.1*Power(t832,2) + 1.1*Power(t842,2) + t349*t449*t983 + t349*t484*t987;
  p_output1[96]=0;
  p_output1[97]=0;
  p_output1[98]=0;
  p_output1[99]=0;
  p_output1[100]=0;
  p_output1[101]=0;
  p_output1[102]=t1066 + t1067 + t1068 + t349*t449*t995 + t349*t484*t999;
  p_output1[103]=t1073;
  p_output1[104]=t1076;
  p_output1[105]=0;
  p_output1[106]=0;
  p_output1[107]=0;
  p_output1[108]=0;
  p_output1[109]=0;
  p_output1[110]=0;
  p_output1[111]=0;
  p_output1[112]=0;
  p_output1[113]=0;
  p_output1[114]=0;
  p_output1[115]=0;
  p_output1[116]=0;
  p_output1[117]=0;
  p_output1[118]=0;
  p_output1[119]=0;
  p_output1[120]=0;
  p_output1[121]=0;
  p_output1[122]=0;
  p_output1[123]=0;
  p_output1[124]=0;
  p_output1[125]=0;
  p_output1[126]=0;
  p_output1[127]=0;
  p_output1[128]=0;
  p_output1[129]=0;
  p_output1[130]=0;
  p_output1[131]=0;
  p_output1[132]=0;
  p_output1[133]=0;
  p_output1[134]=0;
  p_output1[135]=0;
  p_output1[136]=0;
  p_output1[137]=0;
  p_output1[138]=0;
  p_output1[139]=0;
  p_output1[140]=0;
  p_output1[141]=0;
  p_output1[142]=0;
  p_output1[143]=0;
  p_output1[144]=0;
  p_output1[145]=0;
  p_output1[146]=0;
  p_output1[147]=0;
  p_output1[148]=0;
  p_output1[149]=0;
  p_output1[150]=0;
  p_output1[151]=0;
  p_output1[152]=0;
  p_output1[153]=0;
  p_output1[154]=0;
  p_output1[155]=0;
  p_output1[156]=0;
  p_output1[157]=0;
  p_output1[158]=0;
  p_output1[159]=0;
  p_output1[160]=0;
  p_output1[161]=0;
  p_output1[162]=0;
  p_output1[163]=0;
  p_output1[164]=0;
  p_output1[165]=0;
  p_output1[166]=0;
  p_output1[167]=0;
  p_output1[168]=0;
  p_output1[169]=0;
  p_output1[170]=0;
  p_output1[171]=0;
  p_output1[172]=0;
  p_output1[173]=0;
  p_output1[174]=0;
  p_output1[175]=0;
  p_output1[176]=0;
  p_output1[177]=0;
  p_output1[178]=0;
  p_output1[179]=0;
  p_output1[180]=0;
  p_output1[181]=0;
  p_output1[182]=0;
  p_output1[183]=0;
  p_output1[184]=0;
  p_output1[185]=0;
  p_output1[186]=0;
  p_output1[187]=0;
  p_output1[188]=0;
  p_output1[189]=0;
  p_output1[190]=0;
  p_output1[191]=0;
  p_output1[192]=0;
  p_output1[193]=0;
  p_output1[194]=0;
  p_output1[195]=0;
  p_output1[196]=0;
  p_output1[197]=0;
  p_output1[198]=0;
  p_output1[199]=0;
  p_output1[200]=0;
  p_output1[201]=0;
  p_output1[202]=0;
  p_output1[203]=0;
  p_output1[204]=0;
  p_output1[205]=0;
  p_output1[206]=0;
  p_output1[207]=0;
  p_output1[208]=0;
  p_output1[209]=0;
  p_output1[210]=0;
  p_output1[211]=0;
  p_output1[212]=0;
  p_output1[213]=0;
  p_output1[214]=0;
  p_output1[215]=0;
  p_output1[216]=t861;
  p_output1[217]=t909;
  p_output1[218]=t941;
  p_output1[219]=t1001 + t1002 + t1003 + t484*t954 + t551*t958;
  p_output1[220]=t1036 + t1037 + t1038 + t484*t970 + t551*t974;
  p_output1[221]=t1066 + t1067 + t1068 + t484*t983 + t551*t987;
  p_output1[222]=0;
  p_output1[223]=0;
  p_output1[224]=0;
  p_output1[225]=0;
  p_output1[226]=0;
  p_output1[227]=0;
  p_output1[228]=0.01767211875000001*Power(t484,2) + 1.1*Power(t853,2) + 1.1*Power(t858,2) + t484*t995 + t551*t999;
  p_output1[229]=t1097;
  p_output1[230]=t1100;
  p_output1[231]=0;
  p_output1[232]=0;
  p_output1[233]=0;
  p_output1[234]=t872;
  p_output1[235]=t912;
  p_output1[236]=t944;
  p_output1[237]=t1008;
  p_output1[238]=t1043;
  p_output1[239]=t1073;
  p_output1[240]=0;
  p_output1[241]=0;
  p_output1[242]=0;
  p_output1[243]=0;
  p_output1[244]=0;
  p_output1[245]=0;
  p_output1[246]=t1097;
  p_output1[247]=0.016226 + 1.1*Power(t865,2) + 1.1*Power(t870,2);
  p_output1[248]=t1108;
  p_output1[249]=0;
  p_output1[250]=0;
  p_output1[251]=0;
  p_output1[252]=t879;
  p_output1[253]=t915;
  p_output1[254]=t947;
  p_output1[255]=t1011;
  p_output1[256]=t1046;
  p_output1[257]=t1076;
  p_output1[258]=0;
  p_output1[259]=0;
  p_output1[260]=0;
  p_output1[261]=0;
  p_output1[262]=0;
  p_output1[263]=0;
  p_output1[264]=t1100;
  p_output1[265]=t1108;
  p_output1[266]=0.06453092041870001;
  p_output1[267]=0;
  p_output1[268]=0;
  p_output1[269]=0;
  p_output1[270]=0;
  p_output1[271]=0;
  p_output1[272]=0;
  p_output1[273]=0;
  p_output1[274]=0;
  p_output1[275]=0;
  p_output1[276]=0;
  p_output1[277]=0;
  p_output1[278]=0;
  p_output1[279]=0;
  p_output1[280]=0;
  p_output1[281]=0;
  p_output1[282]=0;
  p_output1[283]=0;
  p_output1[284]=0;
  p_output1[285]=0;
  p_output1[286]=0;
  p_output1[287]=0;
  p_output1[288]=0;
  p_output1[289]=0;
  p_output1[290]=0;
  p_output1[291]=0;
  p_output1[292]=0;
  p_output1[293]=0;
  p_output1[294]=0;
  p_output1[295]=0;
  p_output1[296]=0;
  p_output1[297]=0;
  p_output1[298]=0;
  p_output1[299]=0;
  p_output1[300]=0;
  p_output1[301]=0;
  p_output1[302]=0;
  p_output1[303]=0;
  p_output1[304]=0;
  p_output1[305]=0;
  p_output1[306]=0;
  p_output1[307]=0;
  p_output1[308]=0;
  p_output1[309]=0;
  p_output1[310]=0;
  p_output1[311]=0;
  p_output1[312]=0;
  p_output1[313]=0;
  p_output1[314]=0;
  p_output1[315]=0;
  p_output1[316]=0;
  p_output1[317]=0;
  p_output1[318]=0;
  p_output1[319]=0;
  p_output1[320]=0;
  p_output1[321]=0;
  p_output1[322]=0;
  p_output1[323]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 18 && ncols == 1) && 
      !(mrows == 1 && ncols == 18))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 18, (mwSize) 18, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "Mmat10_b1_description.hh"

namespace SymFunction
{

void Mmat10_b1_description_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
